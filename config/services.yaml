# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:

services:
  # default configuration for services in *this* file
  _defaults:
    autowire: true      # Automatically injects dependencies in your services.
    autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

  # makes classes in src/ available to be used as services
  # this creates a service per class whose id is the fully-qualified class name
  App\:
    resource: '../src/'
    exclude:
      - '../src/Domain/Entity/'
      - '../src/Kernel.php'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

  # --- start services
  App\Domain\Service\Jwt\JwtServiceInterface:
    class: App\Infrastructure\Service\Jwt\JwtService
    arguments:
      $key: '%env(APP_SECRET)%'
  App\Domain\Service\Security\EmailCheckerServiceInterface:
    class: App\Infrastructure\Service\Security\EmailCheckerService
  App\Domain\Service\Security\PasswordVerificationServiceInterface:
    class: App\Infrastructure\Service\Security\PasswordVerificationService
  App\Domain\Service\Security\PasswordHasherServiceInterface:
    class: App\Infrastructure\Service\Security\PasswordHasherService
  App\Domain\Service\Security\PasswordCheckerServiceInterface:
    class: App\Infrastructure\Service\Security\PasswordCheckerService
  App\Domain\Service\Db\TransactionManagerInterface:
    class: App\Infrastructure\Service\Db\TransactionManager

  App\Presentation\Web\Service\DataExport\FileDataExportFactoryInterface:
    class: App\Presentation\Web\Service\DataExport\FileDataExportFactory
    calls:
      - setLogger: ['@logger']
  App\Domain\Service\DataImport\DataImportInterface:
    class: App\Infrastructure\Service\DataImport\XlsxDataImport
  # --- end services

  # --- start repositories
  App\Domain\Repository\UserRepositoryInterface:
    class: App\Infrastructure\Repository\UserRepository
  App\Domain\Repository\UserDataRepositoryInterface:
    class: App\Infrastructure\Repository\UserDataRepository
  App\Domain\Repository\GroupRepositoryInterface:
    class: App\Infrastructure\Repository\GroupRepository
  App\Domain\Repository\UserDataGroupRepositoryInterface:
    class: App\Infrastructure\Repository\UserDataGroupRepository
  # --- end repositories

  # --- start serializer
  App\Presentation\Web\Serializer\Normalizer\EmailNormalizer:
    tags: [ 'serializer.normalizer', 'serializer.denormalizer' ]
  # --- end serializer

  # --- start security
  App\Presentation\Web\Security\Voter\StatusVoter:
    tags: [ 'security.voter' ]
  App\Presentation\Web\Security\Voter\PermissionVoter:
    tags: [ 'security.voter' ]
  App\Domain\Service\Security\SecurityService:
    arguments:
      $infinityTokens: '%env(bool:INFINITE_TOKENS)%'
  # --- end security

  # --- start monolog
  monolog.custom_handlers.telegram.error:
    class: Monolog\Handler\TelegramBotHandler
    arguments:
      $apiKey: "%env(TELEGRAM_CONFIG_ERROR_BOT_KEY)%"
      $channel: "%env(TELEGRAM_CONFIG_ERROR_CHAT_ID)%"
      $disableWebPagePreview: true
      $parseMode: MarkdownV2
      $topic: "%env(TELEGRAM_CONFIG_ERROR_TOPIC)%"
      $level: error
    calls:
      - setFormatter: [ '@monolog.custom_formatter.telegram' ]
  monolog.custom_formatter.telegram:
    class: App\Infrastructure\Service\Log\TelegramFormatter
    arguments:
      $includeStacktraces: true
      $ignoreEmptyContextAndExtra: true
  # --- end monolog

when@dev:
  services:
    # --- start event listeners
    App\Presentation\Web\Listener\ProfilerListener:
      tags:
        - {name: 'kernel.event_listener', event: Symfony\Component\HttpKernel\Event\ResponseEvent, priority: -1000}
      autowire: true
    # --- end event listeners