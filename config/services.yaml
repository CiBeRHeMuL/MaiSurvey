# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
  .container.dumper.inline_factories: true

services:
  # default configuration for services in *this* file
  _defaults:
    autowire: true      # Automatically injects dependencies in your services.
    autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

  # makes classes in src/ available to be used as services
  # this creates a service per class whose id is the fully-qualified class name
  App\:
    resource: '../src/'
    exclude:
      - '../src/Domain/Entity/'
      - '../src/Kernel.php'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

  # --- start services
  App\Domain\Service\Jwt\JwtServiceInterface:
    class: App\Infrastructure\Service\Jwt\JwtService
    arguments:
      $key: '%env(APP_SECRET)%'
  App\Domain\Service\Security\EmailCheckerServiceInterface:
    class: App\Infrastructure\Service\Security\EmailCheckerService
  App\Domain\Service\Security\PasswordVerificationServiceInterface:
    class: App\Infrastructure\Service\Security\PasswordVerificationService
  App\Domain\Service\Security\PasswordHasherServiceInterface:
    class: App\Infrastructure\Service\Security\PasswordHasherService
  App\Domain\Service\Security\PasswordCheckerServiceInterface:
    class: App\Infrastructure\Service\Security\PasswordCheckerService
  App\Domain\Service\Db\TransactionManagerInterface:
    class: App\Infrastructure\Service\Db\TransactionManager

  App\Presentation\Web\Service\DataExport\FileDataExportFactoryInterface:
    class: App\Presentation\Web\Service\DataExport\FileDataExportFactory
    calls:
      - setLogger: ['@logger']
  App\Domain\Service\FileReader\FileReaderInterface:
    class: App\Infrastructure\Service\FileReader\XlsxFileReader

  App\Domain\Service\User\UserImporter:
    arguments:
      $appHost: '%env(APP_HOST)%'

  stat_refresher.sync:
    class: App\Domain\Service\SurveyStat\SyncStatRefresher
  stat_refresher.async:
    class: App\Infrastructure\Messenger\Service\SurveyStat\AsyncStatRefresher

  App\Domain\Service\SurveyStat\StatRefresherInterface:
    factory: '@=env("STAT_REFRESH_TYPE") == "async" ? service("stat_refresher.async") : service("stat_refresher.sync")'

  AndrewGos\ClassBuilder\ClassBuilderInterface:
    class: AndrewGos\ClassBuilder\ClassBuilder

  App\Domain\Service\TelegramUser\TelegramLinkServiceInterface:
    class: App\Infrastructure\Service\TelegramUser\TelegramLinkService
  # --- end services

  # --- start repositories
  App\Domain\Repository\UserRepositoryInterface:
    class: App\Infrastructure\Repository\UserRepository
  App\Domain\Repository\UserDataRepositoryInterface:
    class: App\Infrastructure\Repository\UserDataRepository
  App\Domain\Repository\GroupRepositoryInterface:
    class: App\Infrastructure\Repository\GroupRepository
  App\Domain\Repository\UserDataGroupRepositoryInterface:
    class: App\Infrastructure\Repository\UserDataGroupRepository
  App\Domain\Repository\SubjectRepositoryInterface:
    class: App\Infrastructure\Repository\SubjectRepository
  App\Domain\Repository\StudentSubjectRepositoryInterface:
    class: App\Infrastructure\Repository\StudentSubjectRepository
  App\Domain\Repository\SurveyRepositoryInterface:
    class: App\Infrastructure\Repository\SurveyRepository
  App\Domain\Repository\SurveyItemAnswerRepositoryInterface:
    class: App\Infrastructure\Repository\SurveyItemAnswerRepository
  App\Domain\Repository\CompletedSurveyRepositoryInterface:
    class: App\Infrastructure\Repository\CompletedSurveyRepository
  App\Domain\Repository\SurveyItemRepositoryInterface:
    class: App\Infrastructure\Repository\SurveyItemRepository
  App\Domain\Repository\SemesterRepositoryInterface:
    class: App\Infrastructure\Repository\SemesterRepository
  App\Domain\Repository\SurveyTemplateRepositoryInterface:
    class: App\Infrastructure\Repository\SurveyTemplateRepository
  App\Domain\Repository\SurveyTemplateItemRepositoryInterface:
    class: App\Infrastructure\Repository\SurveyTemplateItemRepository
  App\Domain\Repository\SurveyStatRepositoryInterface:
    class: App\Infrastructure\Repository\SurveyStatRepository
  App\Domain\Repository\SurveyStatItemRepositoryInterface:
    class: App\Infrastructure\Repository\SurveyStatItemRepository
  App\Domain\Repository\TelegramUserRepositoryInterface:
    class: App\Infrastructure\Repository\TelegramUserRepository
  # --- end repositories

  # --- start serializer
  App\Presentation\Web\Serializer\Normalizer\EmailNormalizer:
    tags: [ 'serializer.normalizer', 'serializer.denormalizer' ]
  # --- end serializer

  # --- start security
  App\Presentation\Web\Security\Voter\StatusVoter:
    tags: [ 'security.voter' ]
  App\Presentation\Web\Security\Voter\PermissionVoter:
    tags: [ 'security.voter' ]
  App\Domain\Service\Security\SecurityService:
    arguments:
      $accessTokenExpiresIn: '%env(int:ACCESS_TOKEN_EXPIRES_IN_SEC)%'
      $refreshTokenExpiresIn: '%env(int:REFRESH_TOKEN_EXPIRES_IN_SEC)%'
  # --- end security

  # --- start monolog
  monolog.custom_handlers.telegram.error:
    class: Monolog\Handler\TelegramBotHandler
    arguments:
      $apiKey: "%env(TELEGRAM_CONFIG_ERROR_BOT_KEY)%"
      $channel: "%env(TELEGRAM_CONFIG_ERROR_CHAT_ID)%"
      $disableWebPagePreview: true
      $parseMode: MarkdownV2
      $topic: "%env(TELEGRAM_CONFIG_ERROR_TOPIC)%"
      $level: error
    calls:
      - setFormatter: [ '@monolog.custom_formatter.telegram' ]
  monolog.custom_formatter.telegram:
    class: App\Infrastructure\Service\Log\TelegramFormatter
    arguments:
      $includeStacktraces: true
      $ignoreEmptyContextAndExtra: true

  Monolog\Processor\PsrLogMessageProcessor:
    tags:
      - { name: monolog.processor, channel: 'app' }
  # --- end monolog

  # --- start telegram
  telegram_bot.token:
    class: AndrewGos\TelegramBot\ValueObject\BotToken
    arguments:
      $token: '%env(TELEGRAM_BOT_KEY)%'

  telegram_bot.processors.start:
    class: App\Presentation\Telegram\UpdateProcessor\StartCommandProcessor

  telegram_bot.handler.sync:
    class: AndrewGos\TelegramBot\UpdateHandler\UpdateHandler
    factory: ['App\Presentation\Telegram\Factory\TelegramFactory', 'createSyncHandler']
    arguments:
      $token: '@telegram_bot.token'
      $logger: '@logger'
    calls:
      - addCommandMessageProcess: [start, '@telegram_bot.processors.start']

  telegram_bot.sync:
    class: AndrewGos\TelegramBot\Telegram
    factory: ['AndrewGos\TelegramBot\TelegramFactory', 'getDefaultTelegram']
    arguments: ['@telegram_bot.token']
    calls:
      - setLogger: ['@logger']
      - setUpdateHandler: ['@telegram_bot.handler.sync']

  telegram_bot.async:
    class: AndrewGos\TelegramBot\Telegram
    factory: ['App\Presentation\Telegram\Factory\TelegramFactory', 'createAsync']
    arguments:
      $token: '@telegram_bot.token'
      $messageBus: '@messenger.bus.default'
      $logger: '@logger'

  AndrewGos\TelegramBot\Telegram:
    factory: '@=env("TELEGRAM_PROCESS_TYPE") == "async" ? service("telegram_bot.async") : service("telegram_bot.sync")'

  App\Presentation\Telegram\Messenger\Handler\TelegramRequestHandler:
    arguments:
      $telegram: '@telegram_bot.sync'
  # --- end telegram
