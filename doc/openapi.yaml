openapi: 3.0.0
info:
  title: 'MAI Survey Service'
  description: 'MAI Survey Service'
  version: 1.0.0
servers:
  -
    url: 'https://api.mai-survey.ru'
  -
    url: 'http://mai-survey.loc'
    description: 'Local development server'
paths:
  /auth/sign-in:
    post:
      tags:
        - auth
      summary: 'Вход в приложение.'
      operationId: post_sign-in
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessResponse' }
                  - { properties: { data: { $ref: '#/components/schemas/SigningInUser' } }, type: object }
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security: []
  /auth/sign-up/1:
    post:
      tags:
        - auth
      summary: 'Регистрация в приложении. Шаг 1'
      operationId: post_sign-up-1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpStep1Dto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessResponse' }
                  - { properties: { data: { $ref: '#/components/schemas/SigningInUser' } }, type: object }
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security: []
  /auth/sign-up/2:
    post:
      tags:
        - auth
      summary: 'Регистрация в приложении. Шаг 2 (Персональные данные)'
      operationId: post_sign-up-2
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpStep2Dto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessResponse' }
                  - { properties: { data: { $ref: '#/components/schemas/User' } }, type: object }
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/refresh:
    put:
      tags:
        - auth
      summary: 'Обновить токен доступа.'
      operationId: put_refresh-credentials
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshCredentialsDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessResponse' }
                  - { properties: { data: { $ref: '#/components/schemas/UserCredentials' } }, type: object }
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security: []
  /groups:
    get:
      tags:
        - groups
      summary: 'Получить список групп с фильтрацией и пагинацией.'
      operationId: get_get-all-groups
      parameters:
        -
          name: name
          in: query
          required: false
          schema:
            title: 'Название для фильтрации'
            type: string
            default: null
            maxLength: 255
            minLength: 1
            nullable: true
        -
          name: sort_by
          in: query
          required: false
          schema:
            title: 'Сортировка по'
            type: string
            default: name
            enum:
              - name
        -
          name: sort_type
          in: query
          required: false
          schema:
            title: 'Тип сортировки'
            type: string
            default: asc
            enum:
              - asc
              - desc
        -
          name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        -
          name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 20
            maximum: 100
            minimum: 0
            nullable: true
      responses:
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessWithPaginationResponse' }
                  - { properties: { data: { properties: { items: { type: array, items: { $ref: '#/components/schemas/Group' } } }, type: object } }, type: object }
  /group:
    post:
      tags:
        - groups
      summary: 'Создать группу'
      operationId: post_create-group
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGroupDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessResponse' }
                  - { properties: { data: { $ref: '#/components/schemas/Group' } }, type: object }
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /groups/import:
    post:
      tags:
        - groups
      summary: 'Импорт групп'
      operationId: post_import-groups
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              allOf:
                -
                  $ref: '#/components/schemas/ImportGroupsDto'
                -
                  properties: { file: { type: string, format: binary } }
                  type: object
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessResponse' }
                  - { properties: { data: { $ref: '#/components/schemas/CreatedGroupsInfo' } }, type: object }
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /health:
    get:
      tags:
        - health
      summary: 'Проверка того, что сервер в рабочем состоянии'
      operationId: get_check-health
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      security: []
  /me:
    get:
      tags:
        - me
      summary: 'Информация обо мне.'
      operationId: get_get-me
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessResponse' }
                  - { properties: { data: { $ref: '#/components/schemas/User' } }, type: object }
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /roles:
    get:
      tags:
        - roles
      operationId: get_get-all-roles
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessWithPaginationResponse' }
                  - { properties: { data: { properties: { items: { type: array, items: { $ref: '#/components/schemas/Role' } } }, type: object } }, type: object }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /semester:
    post:
      tags:
        - semesters
      operationId: post_create-semester
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSemesterDto'
      responses:
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessResponse' }
                  - { properties: { data: { $ref: '#/components/schemas/Semester' } }, type: object }
  /semesters:
    get:
      tags:
        - semesters
      operationId: get_create-semester-multi
      parameters:
        -
          name: sort_by
          in: query
          required: false
          schema:
            title: 'Сортировка по'
            type: string
            default: year
            enum:
              - year
        -
          name: sort_type
          in: query
          required: false
          schema:
            title: 'Тип сортировки'
            type: string
            default: asc
            enum:
              - asc
              - desc
        -
          name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        -
          name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 100
            maximum: 100
            minimum: 0
            nullable: true
      responses:
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessWithPaginationResponse' }
                  - { properties: { data: { properties: { items: { type: array, items: { $ref: '#/components/schemas/Semester' } } }, type: object } }, type: object }
  /student-subjects:
    get:
      tags:
        - student-subjects
      summary: 'Список предметов студентов с пагинацией и фильтрацией'
      operationId: get_get-all-student-subjects
      parameters:
        -
          name: 'user_ids[]'
          in: query
          required: false
          schema:
            title: 'Пользователи для фильтрации'
            type: array
            items: {  }
            default: null
            maxItems: 50
            nullable: true
        -
          name: 'teacher_ids[]'
          in: query
          required: false
          schema:
            title: 'Преподаватели для фильтрации'
            type: array
            items: {  }
            default: null
            maxItems: 50
            nullable: true
        -
          name: 'subject_ids[]'
          in: query
          required: false
          schema:
            title: 'Предметы для фильтрации'
            type: array
            items: {  }
            default: null
            maxItems: 50
            nullable: true
        -
          name: is_actual_from
          in: query
          required: false
          schema:
            title: 'Был актуален с'
            type: string
            nullable: true
        -
          name: is_actual_to
          in: query
          required: false
          schema:
            title: 'Был актуален до'
            type: string
            nullable: true
        -
          name: sort_by
          in: query
          required: false
          schema:
            title: 'Сортировка по'
            type: string
            default: name
            enum:
              - name
              - actual_from
              - actual_to
        -
          name: sort_type
          in: query
          required: false
          schema:
            title: 'Тип сортировки'
            type: string
            default: asc
            enum:
              - asc
              - desc
        -
          name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        -
          name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 100
            maximum: 100
            minimum: 0
            nullable: true
      responses:
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessWithPaginationResponse' }
                  - { properties: { data: { properties: { items: { type: array, items: { $ref: '#/components/schemas/StudentSubject' } } }, type: object } }, type: object }
  /student-subjects/my:
    get:
      tags:
        - student-subjects
      summary: 'Список моих предметов с пагинацией и фильтрацией'
      operationId: get_get-my-student-subjects
      parameters:
        -
          name: actual
          in: query
          required: false
          schema:
            title: 'Актуален ли предмет на текущий момент'
            type: boolean
            default: null
            nullable: true
        -
          name: 'subject_ids[]'
          in: query
          required: false
          schema:
            title: 'Предметы для фильтрации'
            type: array
            items: {  }
            default: null
            maxItems: 50
            nullable: true
        -
          name: 'teacher_ids[]'
          in: query
          required: false
          schema:
            title: 'Преподаватели для фильтрации'
            type: array
            items: {  }
            default: null
            maxItems: 50
            nullable: true
        -
          name: sort_by
          in: query
          required: false
          schema:
            title: 'Сортировка по'
            type: string
            default: name
            enum:
              - name
              - actual_from
              - actual_to
        -
          name: sort_type
          in: query
          required: false
          schema:
            title: 'Тип сортировки'
            type: string
            default: asc
            enum:
              - asc
              - desc
        -
          name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        -
          name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 100
            maximum: 100
            minimum: 0
            nullable: true
      responses:
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessWithPaginationResponse' }
                  - { properties: { data: { properties: { items: { type: array, items: { $ref: '#/components/schemas/MyStudentSubject' } } }, type: object } }, type: object }
  /student-subjects/import:
    post:
      tags:
        - student-subjects
      summary: 'Импорт предметов для студентов индивидуально'
      operationId: post_student-subjects-import-for-student
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportStudentSubjectsDto'
      responses:
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessResponse' }
                  - { properties: { data: { $ref: '#/components/schemas/CreatedStudentSubjectsInfo' } }, type: object }
  /student-subjects/import/groups:
    post:
      tags:
        - student-subjects
      summary: 'Импорт предметов для студентов по группам'
      operationId: post_student-subjects-import-for-groups
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportSSByGroupsDto'
      responses:
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessResponse' }
                  - { properties: { data: { $ref: '#/components/schemas/CreatedStudentSubjectsInfo' } }, type: object }
  /subjects:
    get:
      tags:
        - subjects
      summary: 'Получить список предметов с фильтрацией и пагинацией.'
      operationId: get_get-all-subjects
      parameters:
        -
          name: 'semester_ids[]'
          in: query
          required: false
          schema:
            title: 'ID семестра'
            type: array
            items:
              type: string
            default: null
            nullable: true
        -
          name: name
          in: query
          required: false
          schema:
            title: 'Название для фильтрации'
            type: string
            default: null
            maxLength: 255
            minLength: 1
            nullable: true
        -
          name: sort_by
          in: query
          required: false
          schema:
            title: 'Сортировка по'
            type: string
            default: name
            enum:
              - name
        -
          name: sort_type
          in: query
          required: false
          schema:
            title: 'Тип сортировки'
            type: string
            default: asc
            enum:
              - asc
              - desc
        -
          name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        -
          name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 20
            maximum: 100
            minimum: 0
            nullable: true
      responses:
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessWithPaginationResponse' }
                  - { properties: { data: { properties: { items: { type: array, items: { $ref: '#/components/schemas/Subject' } } }, type: object } }, type: object }
  /subject:
    post:
      tags:
        - subjects
      summary: 'Создать предмет'
      operationId: post_create-subject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSubjectDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessResponse' }
                  - { properties: { data: { $ref: '#/components/schemas/Subject' } }, type: object }
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /subjects/import:
    post:
      tags:
        - subjects
      summary: 'Импорт предметов'
      operationId: post_import-subjects
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              allOf:
                -
                  $ref: '#/components/schemas/ImportSubjectsDto'
                -
                  properties: { file: { type: string, format: binary } }
                  type: object
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessResponse' }
                  - { properties: { data: { $ref: '#/components/schemas/CreatedSubjectsInfo' } }, type: object }
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /surveys/my:
    get:
      tags:
        - surveys
      operationId: get_survey-get-all-my
      parameters:
        -
          name: 'subject_ids[]'
          in: query
          required: false
          schema:
            title: 'Предметы для фильтрации'
            type: array
            items: {  }
            default: null
            maxItems: 50
            nullable: true
        -
          name: completed
          in: query
          required: false
          schema:
            title: 'Завершен ли опрос'
            type: boolean
            default: null
            nullable: true
        -
          name: sort_by
          in: query
          required: false
          schema:
            title: 'Сортировка по'
            type: string
            default: name
            enum:
              - name
              - completed
              - created_at
        -
          name: sort_type
          in: query
          required: false
          schema:
            title: 'Тип сортировки'
            type: string
            default: asc
            enum:
              - asc
              - desc
        -
          name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        -
          name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 100
            maximum: 100
            minimum: 0
            nullable: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessWithPaginationResponse' }
                  - { properties: { data: { properties: { items: { type: array, items: { $ref: '#/components/schemas/LiteMySurvey' } } }, type: object } }, type: object }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
  '/surveys/my/{id}':
    get:
      tags:
        - surveys
      operationId: get_survey-get-my-by-id
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
            pattern: '[0-9a-f]{8}-[0-9a-f]{4}-[13-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}'
        -
          name: completed
          in: query
          required: false
          schema:
            title: 'Завершен ли опрос'
            type: boolean
            default: null
            nullable: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessResponse' }
                  - { properties: { data: { $ref: '#/components/schemas/MySurvey' } }, type: object }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
  '/surveys/my/{id}/complete':
    put:
      tags:
        - surveys
      summary: 'Пройти опрос'
      operationId: put_survey-complete-my-by-id
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
            pattern: '[0-9a-f]{8}-[0-9a-f]{4}-[13-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CompleteSurveyItemDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
  /survey:
    post:
      tags:
        - surveys
      summary: 'Создать опрос'
      operationId: post_create-survey
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSurveyDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessResponse' }
                  - { properties: { data: { $ref: '#/components/schemas/Survey' } }, type: object }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
  '/surveys/{id}':
    get:
      tags:
        - surveys
      operationId: get_survey-get-by-id
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
            pattern: '[0-9a-f]{8}-[0-9a-f]{4}-[13-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessResponse' }
                  - { properties: { data: { $ref: '#/components/schemas/FullSurvey' } }, type: object }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
    put:
      tags:
        - surveys
      summary: 'Обновить опрос'
      operationId: put_update-survey
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
            pattern: '[0-9a-f]{8}-[0-9a-f]{4}-[13-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSurveyDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessResponse' }
                  - { properties: { data: { $ref: '#/components/schemas/FullSurvey' } }, type: object }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
  /survey/multi-subject:
    post:
      tags:
        - surveys
      summary: 'Создать опрос для нескольких предметов сразу'
      operationId: post_create-survey-multi-subject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSurveyMSDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessWithPaginationResponse' }
                  - { properties: { data: { properties: { items: { type: array, items: { $ref: '#/components/schemas/Survey' } } }, type: object } }, type: object }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
  /survey/from-template:
    post:
      tags:
        - surveys
      summary: 'Создать опрос из шаблона'
      operationId: post_create-survey-from-template
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFromTemplateDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessResponse' }
                  - { properties: { data: { $ref: '#/components/schemas/Survey' } }, type: object }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
  /survey/from-template/multi-subject:
    post:
      tags:
        - surveys
      summary: 'Создать опрос из шаблона для нескольких предметов сразу'
      operationId: post_create-survey-from-template-multi-subject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMSFromTemplateDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessWithPaginationResponse' }
                  - { properties: { data: { properties: { items: { type: array, items: { $ref: '#/components/schemas/Survey' } } }, type: object } }, type: object }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
  /surveys:
    get:
      tags:
        - surveys
      operationId: get_survey-get-all
      parameters:
        -
          name: 'subject_ids[]'
          in: query
          required: false
          schema:
            title: 'Предметы для фильтрации'
            type: array
            items: {  }
            default: null
            maxItems: 50
            nullable: true
        -
          name: title
          in: query
          required: false
          schema:
            title: 'Название опроса'
            type: string
            default: null
            nullable: true
        -
          name: sort_by
          in: query
          required: false
          schema:
            title: 'Сортировка по'
            type: string
            default: name
            enum:
              - name
              - completed
              - created_at
        -
          name: sort_type
          in: query
          required: false
          schema:
            title: 'Тип сортировки'
            type: string
            default: asc
            enum:
              - asc
              - desc
        -
          name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        -
          name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 100
            maximum: 100
            minimum: 0
            nullable: true
        -
          name: actual
          in: query
          required: false
          schema:
            title: 'Актуален ли опрос'
            type: boolean
            default: null
            nullable: true
        -
          name: 'statuses[]'
          in: query
          required: false
          schema:
            title: 'Статусы для фильтрации'
            type: array
            items: {  }
            default: null
            nullable: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessWithPaginationResponse' }
                  - { properties: { data: { properties: { items: { type: array, items: { $ref: '#/components/schemas/LiteFullSurvey' } } }, type: object } }, type: object }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
  '/surveys/{id}/stat':
    get:
      tags:
        - survey-stats
      operationId: get_get-survey-stat-by-id
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
            pattern: '[0-9a-f]{8}-[0-9a-f]{4}-[13-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessResponse' }
                  - { properties: { data: { $ref: '#/components/schemas/SurveyStat' } }, type: object }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/surveys/{id}/stat/export/xlsx':
    get:
      tags:
        - survey-stats
      summary: 'Выгрузить статистику'
      operationId: get_export-survey-stat-by-id
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
            pattern: '[0-9a-f]{8}-[0-9a-f]{4}-[13-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}'
      responses:
        '200':
          description: Ok
          content:
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /surveys/stat/export/xlsx:
    get:
      tags:
        - survey-stats
      summary: 'Выгрузить статистику по нескольким опросам'
      operationId: get_export-survey-stat-all
      parameters:
        -
          name: 'subject_ids[]'
          in: query
          required: false
          schema:
            title: 'Предметы для фильтрации'
            type: array
            items: {  }
            default: null
            maxItems: 50
            nullable: true
        -
          name: title
          in: query
          required: false
          schema:
            title: 'Название опроса'
            type: string
            default: null
            nullable: true
        -
          name: sort_by
          in: query
          required: false
          schema:
            title: 'Сортировка по'
            type: string
            default: name
            enum:
              - name
              - completed
              - created_at
        -
          name: sort_type
          in: query
          required: false
          schema:
            title: 'Тип сортировки'
            type: string
            default: asc
            enum:
              - asc
              - desc
        -
          name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        -
          name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 100
            maximum: 100
            minimum: 0
            nullable: true
        -
          name: actual
          in: query
          required: false
          schema:
            title: 'Актуален ли опрос'
            type: boolean
            default: null
            nullable: true
        -
          name: 'statuses[]'
          in: query
          required: false
          schema:
            title: 'Статусы для фильтрации'
            type: array
            items: {  }
            default: null
            nullable: true
      responses:
        '200':
          description: Ok
          content:
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /survey-templates:
    get:
      tags:
        - survey-templates
      summary: 'Список шаблонов опросов'
      operationId: get_survey-template-get-all
      parameters:
        -
          name: name
          in: query
          required: false
          schema:
            title: 'Название шаблона'
            type: string
            default: null
            nullable: true
        -
          name: sort_by
          in: query
          required: false
          schema:
            title: 'Сортировка по'
            type: string
            default: name
            enum:
              - name
              - created_at
        -
          name: sort_type
          in: query
          required: false
          schema:
            title: 'Тип сортировки'
            type: string
            default: asc
            enum:
              - asc
              - desc
        -
          name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        -
          name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 100
            maximum: 100
            minimum: 0
            nullable: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessWithPaginationResponse' }
                  - { properties: { data: { properties: { items: { type: array, items: { $ref: '#/components/schemas/LiteSurveyTemplate' } } }, type: object } }, type: object }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
  '/survey-templates/{id}':
    get:
      tags:
        - survey-templates
      summary: 'Получить шаблон опроса по id'
      operationId: get_survey-template-get-my-by-id
      parameters:
        -
          name: id
          in: path
          required: true
          schema:
            type: string
            pattern: '[0-9a-f]{8}-[0-9a-f]{4}-[13-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessResponse' }
                  - { properties: { data: { $ref: '#/components/schemas/SurveyTemplate' } }, type: object }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
  /survey-template:
    post:
      tags:
        - survey-templates
      summary: 'Создать шаблон опроса'
      operationId: post_create-survey-template
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSurveyTemplateDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessResponse' }
                  - { properties: { data: { $ref: '#/components/schemas/SurveyTemplate' } }, type: object }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
  /teacher-subjects:
    get:
      tags:
        - teacher-subjects
      summary: 'Список предметов преподавателей с пагинацией и фильтрацией'
      operationId: get_get-all-teacher-subjects
      parameters:
        -
          name: 'teacher_ids[]'
          in: query
          required: false
          schema:
            title: 'Преподаватели для фильтрации'
            type: array
            items: {  }
            default: null
            maxItems: 50
            nullable: true
        -
          name: 'subject_ids[]'
          in: query
          required: false
          schema:
            title: 'Предметы для фильтрации'
            type: array
            items: {  }
            default: null
            maxItems: 50
            nullable: true
        -
          name: sort_by
          in: query
          required: false
          schema:
            title: 'Сортировка по'
            type: string
            default: name
            enum:
              - name
              - created_at
        -
          name: sort_type
          in: query
          required: false
          schema:
            title: 'Тип сортировки'
            type: string
            default: asc
            enum:
              - asc
              - desc
        -
          name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        -
          name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 100
            maximum: 100
            minimum: 0
            nullable: true
      responses:
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessWithPaginationResponse' }
                  - { properties: { data: { properties: { items: { type: array, items: { $ref: '#/components/schemas/TeacherSubject' } } }, type: object } }, type: object }
  /teacher-subjects/my:
    get:
      tags:
        - teacher-subjects
      summary: 'Список моих предметов с пагинацией и фильтрацией'
      operationId: get_get-my-teacher-subjects
      parameters:
        -
          name: 'subject_ids[]'
          in: query
          required: false
          schema:
            title: 'Предметы для фильтрации'
            type: array
            items: {  }
            default: null
            maxItems: 50
            nullable: true
        -
          name: sort_by
          in: query
          required: false
          schema:
            title: 'Сортировка по'
            type: string
            default: name
            enum:
              - name
              - created_at
        -
          name: sort_type
          in: query
          required: false
          schema:
            title: 'Тип сортировки'
            type: string
            default: asc
            enum:
              - asc
              - desc
        -
          name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        -
          name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 100
            maximum: 100
            minimum: 0
            nullable: true
      responses:
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessWithPaginationResponse' }
                  - { properties: { data: { properties: { items: { type: array, items: { $ref: '#/components/schemas/MyTeacherSubject' } } }, type: object } }, type: object }
  /teacher-subjects/import:
    post:
      tags:
        - teacher-subjects
      summary: 'Импорт предметов для преподавателей'
      operationId: post_import-teacher-subjects
      requestBody:
        required: false
        content:
          multipart/form-data:
            schema:
              allOf:
                -
                  $ref: '#/components/schemas/ImportTeacherSubjectsDto'
                -
                  properties: { file: { type: string, format: binary } }
                  type: object
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessResponse' }
                  - { properties: { data: { $ref: '#/components/schemas/CreatedTeacherSubjectsInfo' } }, type: object }
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /user:
    post:
      tags:
        - users
      summary: 'Создание пользователя'
      operationId: post_create-full-user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFullUserDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessResponse' }
                  - { properties: { data: { $ref: '#/components/schemas/User' } }, type: object }
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users:
    get:
      tags:
        - users
      summary: 'Получить всех пользователей с пагинацией и сортировкой'
      operationId: get_get-all-users
      parameters:
        -
          name: 'roles[]'
          in: query
          required: false
          schema:
            title: 'Роли для фильтрации'
            type: array
            items: {  }
            default: null
            maxItems: 50
            nullable: true
        -
          name: name
          in: query
          required: false
          schema:
            title: 'Имя для фильтрации'
            type: string
            default: null
            maxLength: 255
            minLength: 1
            nullable: true
        -
          name: email
          in: query
          required: false
          schema:
            title: 'Почта для фильтрации'
            type: string
            default: null
            maxLength: 255
            minLength: 1
            nullable: true
        -
          name: deleted
          in: query
          required: false
          schema:
            title: 'Фильтр по метке удаления'
            type: boolean
            default: null
            nullable: true
        -
          name: status
          in: query
          required: false
          schema:
            title: 'Статус для фильтрации'
            type: string
            default: null
            enum:
              - draft
              - active
            nullable: true
        -
          name: 'group_ids[]'
          in: query
          required: false
          schema:
            title: 'Группы для фильтрации'
            type: array
            items: {  }
            default: null
            maxItems: 50
            nullable: true
        -
          name: with_group
          in: query
          required: false
          schema:
            title: 'Фильтровать только пользователей с группой'
            type: boolean
            default: null
            nullable: true
        -
          name: created_from
          in: query
          required: false
          schema:
            title: 'Создан после'
            type: string
            default: null
            nullable: true
        -
          name: created_to
          in: query
          required: false
          schema:
            title: 'Создан до'
            type: string
            default: null
            nullable: true
        -
          name: sort_by
          in: query
          required: false
          schema:
            title: 'Сортировка по'
            type: string
            default: name
            enum:
              - name
              - created_at
              - deleted
              - email
        -
          name: sort_type
          in: query
          required: false
          schema:
            title: 'Тип сортировки'
            type: string
            default: asc
            enum:
              - asc
              - desc
        -
          name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        -
          name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 100
            maximum: 100
            minimum: 0
            nullable: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessWithPaginationResponse' }
                  - { properties: { data: { properties: { items: { type: array, items: { $ref: '#/components/schemas/User' } } }, type: object } }, type: object }
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/users/export/{exportType}':
    get:
      tags:
        - users
      summary: 'Экспорт пользователей в файл'
      operationId: get_users-export-to-file
      parameters:
        -
          name: exportType
          in: path
          required: true
          schema:
            type: string
            pattern: xlsx|csv
            enum:
              - xlsx
              - csv
        -
          name: 'roles[]'
          in: query
          required: false
          schema:
            title: 'Роли для фильтрации'
            type: array
            items: {  }
            default: null
            maxItems: 50
            nullable: true
        -
          name: name
          in: query
          required: false
          schema:
            title: 'Имя для фильтрации'
            type: string
            default: null
            maxLength: 255
            minLength: 1
            nullable: true
        -
          name: email
          in: query
          required: false
          schema:
            title: 'Почта для фильтрации'
            type: string
            default: null
            maxLength: 255
            minLength: 1
            nullable: true
        -
          name: deleted
          in: query
          required: false
          schema:
            title: 'Фильтр по метке удаления'
            type: boolean
            default: null
            nullable: true
        -
          name: status
          in: query
          required: false
          schema:
            title: 'Статус для фильтрации'
            type: string
            default: null
            enum:
              - draft
              - active
            nullable: true
        -
          name: 'group_ids[]'
          in: query
          required: false
          schema:
            title: 'Группы для фильтрации'
            type: array
            items: {  }
            default: null
            maxItems: 50
            nullable: true
        -
          name: with_group
          in: query
          required: false
          schema:
            title: 'Фильтровать только пользователей с группой'
            type: boolean
            default: null
            nullable: true
        -
          name: created_from
          in: query
          required: false
          schema:
            title: 'Создан после'
            type: string
            default: null
            nullable: true
        -
          name: created_to
          in: query
          required: false
          schema:
            title: 'Создан до'
            type: string
            default: null
            nullable: true
        -
          name: sort_by
          in: query
          required: false
          schema:
            title: 'Сортировка по'
            type: string
            default: name
            enum:
              - name
              - created_at
              - deleted
              - email
        -
          name: sort_type
          in: query
          required: false
          schema:
            title: 'Тип сортировки'
            type: string
            default: asc
            enum:
              - asc
              - desc
        -
          name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        -
          name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 100
            maximum: 100
            minimum: 0
            nullable: true
      responses:
        '200':
          description: Ok
          content:
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
            text/csv:
              schema:
                type: string
                format: binary
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/update:
    post:
      tags:
        - users
      summary: 'Массовое обновление пользователей'
      operationId: post_users-update-all
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUsersDto'
      responses:
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessResponse' }
                  - { properties: { data: { $ref: '#/components/schemas/UpdatedUsersInfo' } }, type: object }
  /users/import:
    post:
      tags:
        - users
      operationId: post_users-import
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportUsersDto'
      responses:
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessResponse' }
                  - { properties: { data: { $ref: '#/components/schemas/CreatedUsersInfo' } }, type: object }
  /user-data/all:
    get:
      tags:
        - user-data
      summary: 'Получить полный список данных пользователей с фильтрацией и пагинацией.'
      operationId: get_get-all-user-data
      parameters:
        -
          name: name
          in: query
          required: false
          schema:
            title: 'Имя для фильтрации'
            type: string
            default: null
            maxLength: 255
            minLength: 1
            nullable: true
        -
          name: with_group
          in: query
          required: false
          schema:
            title: 'Учитывать только данные с группой'
            type: boolean
            default: null
            nullable: true
        -
          name: with_user
          in: query
          required: false
          schema:
            title: 'Учитывать только данные с пользователем'
            type: boolean
            default: null
            nullable: true
        -
          name: 'group_ids[]'
          in: query
          required: false
          schema:
            title: 'Группы для фильтрации'
            type: array
            items:
              type: string
            default: null
            maxItems: 50
            nullable: true
        -
          name: sort_by
          in: query
          required: false
          schema:
            title: 'Сортировка по'
            type: string
            default: name
            enum:
              - name
        -
          name: sort_type
          in: query
          required: false
          schema:
            title: 'Тип сортировки'
            type: string
            default: asc
            enum:
              - asc
              - desc
        -
          name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        -
          name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 20
            maximum: 100
            minimum: 0
            nullable: true
        -
          name: for_role
          in: query
          required: false
          schema:
            title: 'Роль, для которой фильтруем значения'
            type: string
            default: null
            enum:
              - admin
              - student
              - teacher
              - survey_creator
            nullable: true
      responses:
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessWithPaginationResponse' }
                  - { properties: { data: { properties: { items: { type: array, items: { $ref: '#/components/schemas/UserData' } } }, type: object } }, type: object }
  /user-data/available:
    get:
      tags:
        - user-data
      summary: 'Получить доступный для привязки список данных пользователей с фильтрацией и пагинацией.'
      operationId: get_get-available-user-data
      parameters:
        -
          name: name
          in: query
          required: false
          schema:
            title: 'Имя для фильтрации'
            type: string
            default: null
            maxLength: 255
            minLength: 1
            nullable: true
        -
          name: with_group
          in: query
          required: false
          schema:
            title: 'Учитывать только данные с группой'
            type: boolean
            default: null
            nullable: true
        -
          name: 'group_ids[]'
          in: query
          required: false
          schema:
            title: 'Группы для фильтрации'
            type: array
            items:
              type: string
            default: null
            maxItems: 50
            nullable: true
        -
          name: sort_by
          in: query
          required: false
          schema:
            title: 'Сортировка по'
            type: string
            default: name
            enum:
              - name
        -
          name: sort_type
          in: query
          required: false
          schema:
            title: 'Тип сортировки'
            type: string
            default: asc
            enum:
              - asc
              - desc
        -
          name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        -
          name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 20
            maximum: 100
            minimum: 0
            nullable: true
        -
          name: for_role
          in: query
          required: false
          schema:
            title: 'Роль, для которой фильтруем значения'
            type: string
            default: null
            enum:
              - admin
              - student
              - teacher
              - survey_creator
            nullable: true
      responses:
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessWithPaginationResponse' }
                  - { properties: { data: { properties: { items: { type: array, items: { $ref: '#/components/schemas/UserData' } } }, type: object } }, type: object }
  /user-data/import:
    post:
      tags:
        - user-data
      summary: 'Импорт данных пользователей'
      operationId: post_import-user-data
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              allOf:
                -
                  $ref: '#/components/schemas/ImportUserDataDto'
                -
                  properties: { file: { type: string, format: binary } }
                  type: object
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessResponse' }
                  - { properties: { data: { $ref: '#/components/schemas/CreatedUserDataInfo' } }, type: object }
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    SignInDto:
      required:
        - email
        - password
      properties:
        email:
          title: Почта
          type: string
        password:
          title: Пароль
          type: string
      type: object
    SignUpStep1Dto:
      required:
        - email
        - password
        - repeat_password
      properties:
        email:
          title: Почта
          type: string
        password:
          title: Пароль
          type: string
        repeat_password:
          title: 'Повторный пароль'
          type: string
      type: object
    SignUpStep2Dto:
      required:
        - user_data_id
      properties:
        user_data_id:
          title: 'ID данных пользователя'
          type: string
      type: object
    RefreshCredentialsDto:
      required:
        - refresh_token
      properties:
        refresh_token:
          title: 'Токен для обновления'
          type: string
      type: object
    GetAllGroupsDto:
      properties:
        name:
          title: 'Название для фильтрации'
          type: string
          default: null
          maxLength: 255
          minLength: 1
          nullable: true
        sort_by:
          title: 'Сортировка по'
          type: string
          default: name
          enum:
            - name
        sort_type:
          title: 'Тип сортировки'
          type: string
          default: asc
          enum:
            - asc
            - desc
        offset:
          type: integer
          default: 0
          minimum: 0
        limit:
          type: integer
          default: 20
          maximum: 100
          minimum: 0
          nullable: true
      type: object
    CreateGroupDto:
      required:
        - name
      properties:
        name:
          title: 'Название группы'
          type: string
          maxLength: 255
      type: object
    ImportGroupsDto:
      properties:
        headers_in_first_row:
          title: 'Находятся ли в первой строке файла заголовки для столбцов'
          type: boolean
          default: true
        name_col:
          title: 'Столбец с названием'
          type: string
          default: A
      type: object
    CreateSemesterDto:
      required:
        - year
        - spring
      properties:
        year:
          type: integer
          maximum: 2100
          minimum: 2000
        spring:
          type: boolean
      type: object
    GetAllSemestersDto:
      properties:
        sort_by:
          title: 'Сортировка по'
          type: string
          default: year
          enum:
            - year
        sort_type:
          title: 'Тип сортировки'
          type: string
          default: asc
          enum:
            - asc
            - desc
        offset:
          type: integer
          default: 0
          minimum: 0
        limit:
          type: integer
          default: 100
          maximum: 100
          minimum: 0
          nullable: true
      type: object
    GetAllStudentSubjectsDto:
      properties:
        user_ids:
          title: 'Пользователи для фильтрации'
          type: array
          items: {  }
          default: null
          maxItems: 50
          nullable: true
        teacher_ids:
          title: 'Преподаватели для фильтрации'
          type: array
          items: {  }
          default: null
          maxItems: 50
          nullable: true
        subject_ids:
          title: 'Предметы для фильтрации'
          type: array
          items: {  }
          default: null
          maxItems: 50
          nullable: true
        is_actual_from:
          title: 'Был актуален с'
          type: string
          nullable: true
        is_actual_to:
          title: 'Был актуален до'
          type: string
          nullable: true
        sort_by:
          title: 'Сортировка по'
          type: string
          default: name
          enum:
            - name
            - actual_from
            - actual_to
        sort_type:
          title: 'Тип сортировки'
          type: string
          default: asc
          enum:
            - asc
            - desc
        offset:
          type: integer
          default: 0
          minimum: 0
        limit:
          type: integer
          default: 100
          maximum: 100
          minimum: 0
          nullable: true
      type: object
    GetMyStudentSubjectsDto:
      properties:
        actual:
          title: 'Актуален ли предмет на текущий момент'
          type: boolean
          default: null
          nullable: true
        subject_ids:
          title: 'Предметы для фильтрации'
          type: array
          items: {  }
          default: null
          maxItems: 50
          nullable: true
        teacher_ids:
          title: 'Преподаватели для фильтрации'
          type: array
          items: {  }
          default: null
          maxItems: 50
          nullable: true
        sort_by:
          title: 'Сортировка по'
          type: string
          default: name
          enum:
            - name
            - actual_from
            - actual_to
        sort_type:
          title: 'Тип сортировки'
          type: string
          default: asc
          enum:
            - asc
            - desc
        offset:
          type: integer
          default: 0
          minimum: 0
        limit:
          type: integer
          default: 100
          maximum: 100
          minimum: 0
          nullable: true
      type: object
    ImportStudentSubjectsDto:
      properties:
        headers_in_first_row:
          title: 'Находятся ли в первой строке файла заголовки для столбцов'
          type: boolean
          default: true
        student_email_col:
          title: 'Столбец с почтой студента'
          type: string
          default: A
        teacher_email_col:
          title: 'Столбец с почтой преподавателя'
          type: string
          default: B
        subject_col:
          title: 'Столбец с названием предмета'
          type: string
          default: C
        type_col:
          title: 'Столбец с типом предмета'
          type: string
          default: D
        year_col:
          title: 'Столбец с годом'
          type: string
          default: E
        semester_col:
          title: 'Столбец с номером семестра (1 - весенний, 2 - осенний)'
          type: string
          default: F
        skip_if_exists:
          title: 'Пропускать новые предметы, которые конфликтуют с существующими'
          type: boolean
          default: false
      type: object
    ImportSSByGroupsDto:
      properties:
        headers_in_first_row:
          title: 'Находятся ли в первой строке файла заголовки для столбцов'
          type: boolean
          default: true
        group_name_col:
          title: 'Столбец с названием группы'
          type: string
          default: A
        teacher_email_col:
          title: 'Столбец с почтой преподавателя'
          type: string
          default: B
        subject_col:
          title: 'Столбец с названием предмета'
          type: string
          default: C
        type_col:
          title: 'Столбец с типом предмета'
          type: string
          default: D
        year_col:
          title: 'Столбец с годом'
          type: string
          default: E
        semester_col:
          title: 'Столбец с номером семестра (1 - весенний, 2 - осенний)'
          type: string
          default: F
        skip_if_exists:
          title: 'Пропускать новые предметы, которые конфликтуют с существующими'
          type: boolean
          default: false
      type: object
    GetAllSubjectsDto:
      properties:
        semester_ids:
          title: 'ID семестра'
          type: array
          items:
            type: string
          default: null
          nullable: true
        name:
          title: 'Название для фильтрации'
          type: string
          default: null
          maxLength: 255
          minLength: 1
          nullable: true
        sort_by:
          title: 'Сортировка по'
          type: string
          default: name
          enum:
            - name
        sort_type:
          title: 'Тип сортировки'
          type: string
          default: asc
          enum:
            - asc
            - desc
        offset:
          type: integer
          default: 0
          minimum: 0
        limit:
          type: integer
          default: 20
          maximum: 100
          minimum: 0
          nullable: true
      type: object
    CreateSubjectDto:
      required:
        - name
        - semester_id
      properties:
        name:
          title: 'Название предмета'
          type: string
          maxLength: 255
        semester_id:
          title: 'ID семестра'
          type: string
      type: object
    ImportSubjectsDto:
      properties:
        headers_in_first_row:
          title: 'Находятся ли в первой строке файла заголовки для столбцов'
          type: boolean
          default: true
        name_col:
          title: 'Столбец с названием'
          type: string
          default: A
        year_col:
          title: 'Столбец с годом'
          type: string
          default: B
        semester_col:
          title: 'Столбец с семестром'
          type: string
          default: C
      type: object
    GetMySurveysDto:
      properties:
        subject_ids:
          title: 'Предметы для фильтрации'
          type: array
          items: {  }
          default: null
          maxItems: 50
          nullable: true
        completed:
          title: 'Завершен ли опрос'
          type: boolean
          default: null
          nullable: true
        sort_by:
          title: 'Сортировка по'
          type: string
          default: name
          enum:
            - name
            - completed
            - created_at
        sort_type:
          title: 'Тип сортировки'
          type: string
          default: asc
          enum:
            - asc
            - desc
        offset:
          type: integer
          default: 0
          minimum: 0
        limit:
          type: integer
          default: 100
          maximum: 100
          minimum: 0
          nullable: true
      type: object
    GetMySurveyByIdDto:
      properties:
        completed:
          title: 'Завершен ли опрос'
          type: boolean
          default: null
          nullable: true
      type: object
    CompleteSurveyItemDto:
      required:
        - id
      properties:
        id:
          type: string
        data:
          nullable: true
          oneOf:
            -
              $ref: '#/components/schemas/AnswerDataDtoInterface'
      type: object
    CreateSurveyDto:
      required:
        - title
        - subject_id
        - items
        - status
      properties:
        title:
          title: Заголовок
          type: string
          maxLength: 255
        subject_id:
          title: 'ID предмета'
          type: string
        items:
          title: Вопросы
          type: array
          items:
            $ref: '#/components/schemas/CreateItemDto'
        status:
          title: Статус
          type: string
          enum:
            - active
            - draft
            - closed
        actual_to:
          title: 'Актуален до'
          type: string
          default: null
          nullable: true
      type: object
    UpdateSurveyDto:
      required:
        - title
        - subject_id
        - items
        - status
      properties:
        title:
          title: Заголовок
          type: string
          maxLength: 255
        subject_id:
          title: 'ID предмета'
          type: string
        items:
          title: Вопросы
          type: array
          items:
            $ref: '#/components/schemas/UpdateItemDto'
        status:
          title: Статус
          type: string
          enum:
            - active
            - draft
            - closed
        actual_to:
          title: 'Актуален до'
          type: string
          default: null
          nullable: true
      type: object
    CreateSurveyMSDto:
      required:
        - title
        - subject_ids
        - items
        - status
      properties:
        title:
          title: Заголовок
          type: string
          maxLength: 255
        subject_ids:
          title: 'ID предметов'
          type: array
          items: {  }
          maxItems: 20
          minItems: 1
        items:
          title: Вопросы
          type: array
          items:
            $ref: '#/components/schemas/CreateItemDto'
        status:
          title: Статус
          type: string
          enum:
            - active
            - draft
            - closed
        actual_to:
          title: 'Время закрытия'
          type: string
          default: null
          nullable: true
      type: object
    CreateFromTemplateDto:
      required:
        - template_id
        - subject_id
        - status
      properties:
        template_id:
          title: 'ID шаблона'
          type: string
        subject_id:
          title: 'ID предмета'
          type: string
        status:
          title: Статус
          type: string
          enum:
            - active
            - draft
            - closed
        actual_to:
          title: 'Время закрытия'
          type: string
          default: null
          nullable: true
      type: object
    CreateMSFromTemplateDto:
      required:
        - template_id
        - subject_ids
        - status
      properties:
        template_id:
          title: 'ID шаблона'
          type: string
        subject_ids:
          title: 'ID предметов'
          type: array
          items: {  }
          maxItems: 20
          minItems: 1
        status:
          title: Статус
          type: string
          enum:
            - active
            - draft
            - closed
        actual_to:
          title: 'Актуален до'
          type: string
          default: null
          nullable: true
      type: object
    GetSurveysDto:
      properties:
        subject_ids:
          title: 'Предметы для фильтрации'
          type: array
          items: {  }
          default: null
          maxItems: 50
          nullable: true
        title:
          title: 'Название опроса'
          type: string
          default: null
          nullable: true
        sort_by:
          title: 'Сортировка по'
          type: string
          default: name
          enum:
            - name
            - completed
            - created_at
        sort_type:
          title: 'Тип сортировки'
          type: string
          default: asc
          enum:
            - asc
            - desc
        offset:
          type: integer
          default: 0
          minimum: 0
        limit:
          type: integer
          default: 100
          maximum: 100
          minimum: 0
          nullable: true
        actual:
          title: 'Актуален ли опрос'
          type: boolean
          default: null
          nullable: true
        statuses:
          title: 'Статусы для фильтрации'
          type: array
          items: {  }
          default: null
          nullable: true
      type: object
    GetAllSurveyTemplatesDto:
      properties:
        name:
          title: 'Название шаблона'
          type: string
          default: null
          nullable: true
        sort_by:
          title: 'Сортировка по'
          type: string
          default: name
          enum:
            - name
            - created_at
        sort_type:
          title: 'Тип сортировки'
          type: string
          default: asc
          enum:
            - asc
            - desc
        offset:
          type: integer
          default: 0
          minimum: 0
        limit:
          type: integer
          default: 100
          maximum: 100
          minimum: 0
          nullable: true
      type: object
    CreateSurveyTemplateDto:
      required:
        - name
        - title
        - items
      properties:
        name:
          title: 'Название шаблона'
          type: string
          maxLength: 255
        title:
          title: Заголовок
          type: string
          maxLength: 255
        items:
          title: Вопросы
          type: array
          items:
            $ref: '#/components/schemas/CreateTemplateItemDto'
      type: object
    GetAllTeacherSubjectsDto:
      properties:
        teacher_ids:
          title: 'Преподаватели для фильтрации'
          type: array
          items: {  }
          default: null
          maxItems: 50
          nullable: true
        subject_ids:
          title: 'Предметы для фильтрации'
          type: array
          items: {  }
          default: null
          maxItems: 50
          nullable: true
        sort_by:
          title: 'Сортировка по'
          type: string
          default: name
          enum:
            - name
            - created_at
        sort_type:
          title: 'Тип сортировки'
          type: string
          default: asc
          enum:
            - asc
            - desc
        offset:
          type: integer
          default: 0
          minimum: 0
        limit:
          type: integer
          default: 100
          maximum: 100
          minimum: 0
          nullable: true
      type: object
    GetMyTeacherSubjectsDto:
      properties:
        subject_ids:
          title: 'Предметы для фильтрации'
          type: array
          items: {  }
          default: null
          maxItems: 50
          nullable: true
        sort_by:
          title: 'Сортировка по'
          type: string
          default: name
          enum:
            - name
            - created_at
        sort_type:
          title: 'Тип сортировки'
          type: string
          default: asc
          enum:
            - asc
            - desc
        offset:
          type: integer
          default: 0
          minimum: 0
        limit:
          type: integer
          default: 100
          maximum: 100
          minimum: 0
          nullable: true
      type: object
    ImportTeacherSubjectsDto:
      properties:
        headers_in_first_row:
          title: 'Находятся ли в первой строке файла заголовки для столбцов'
          type: boolean
          default: true
        subject_col:
          title: 'Столбец с предметом'
          type: string
          default: A
        email_col:
          title: 'Столбец с почтой'
          type: string
          default: B
        type_col:
          title: 'Столбец с типом предмета'
          type: string
          default: C
        year_col:
          title: 'Столбец с годом'
          type: string
          default: D
        semester_col:
          title: 'Столбец с семестром'
          type: string
          default: E
      type: object
    CreateFullUserDto:
      required:
        - email
        - password
        - role
        - first_name
        - last_name
      properties:
        email:
          title: Почта
          type: string
        password:
          title: Пароль
          type: string
        role:
          title: Роль
          type: string
          enum:
            - admin
            - student
            - teacher
            - survey_creator
        first_name:
          title: Имя
          type: string
          maxLength: 255
        last_name:
          title: Фамилия
          type: string
          maxLength: 255
        patronymic:
          title: Отчество
          type: string
          maxLength: 255
          nullable: true
        group_id:
          title: Группа
          type: string
          nullable: true
      type: object
    GetAllUsersDto:
      properties:
        roles:
          title: 'Роли для фильтрации'
          type: array
          items: {  }
          default: null
          maxItems: 50
          nullable: true
        name:
          title: 'Имя для фильтрации'
          type: string
          default: null
          maxLength: 255
          minLength: 1
          nullable: true
        email:
          title: 'Почта для фильтрации'
          type: string
          default: null
          maxLength: 255
          minLength: 1
          nullable: true
        deleted:
          title: 'Фильтр по метке удаления'
          type: boolean
          default: null
          nullable: true
        status:
          title: 'Статус для фильтрации'
          type: string
          default: null
          enum:
            - draft
            - active
          nullable: true
        group_ids:
          title: 'Группы для фильтрации'
          type: array
          items: {  }
          default: null
          maxItems: 50
          nullable: true
        with_group:
          title: 'Фильтровать только пользователей с группой'
          type: boolean
          default: null
          nullable: true
        created_from:
          title: 'Создан после'
          type: string
          default: null
          nullable: true
        created_to:
          title: 'Создан до'
          type: string
          default: null
          nullable: true
        sort_by:
          title: 'Сортировка по'
          type: string
          default: name
          enum:
            - name
            - created_at
            - deleted
            - email
        sort_type:
          title: 'Тип сортировки'
          type: string
          default: asc
          enum:
            - asc
            - desc
        offset:
          type: integer
          default: 0
          minimum: 0
        limit:
          type: integer
          default: 100
          maximum: 100
          minimum: 0
          nullable: true
      type: object
    UpdateUsersDto:
      properties:
        headers_in_first_row:
          title: 'Находятся ли в первой строке файла заголовки для столбцов'
          type: boolean
          default: true
        email_col:
          title: 'Столбец с почтой'
          type: string
          default: A
        last_name_col:
          title: 'Столбец с фамилией'
          type: string
          default: B
        first_name_col:
          title: 'Столбец с именем'
          type: string
          default: C
        patronymic_col:
          title: 'Столбец с отчеством'
          type: string
          default: D
        group_name_col:
          title: 'Столбец с названием группы'
          type: string
          default: E
      type: object
    ImportUsersDto:
      required:
        - for_role
        - password
      properties:
        for_role:
          title: Роль
          type: string
          enum:
            - admin
            - student
            - teacher
            - survey_creator
        password:
          title: Пароль
          type: string
        headers_in_first_row:
          title: 'Находятся ли в первой строке файла заголовки для столбцов'
          type: boolean
          default: true
        last_name_col:
          title: 'Столбец с фамилией'
          type: string
          default: A
        first_name_col:
          title: 'Столбец с именем'
          type: string
          default: B
        patronymic_col:
          title: 'Столбец с отчеством'
          type: string
          default: C
        group_name_col:
          title: 'Столбец с названием группы'
          type: string
          default: D
        email_col:
          title: 'Столбец с почтой (необязательной, только если для пользователя хочется установить свою почту)'
          type: string
          default: E
      type: object
    GetAllUserDataDto:
      properties:
        name:
          title: 'Имя для фильтрации'
          type: string
          default: null
          maxLength: 255
          minLength: 1
          nullable: true
        with_group:
          title: 'Учитывать только данные с группой'
          type: boolean
          default: null
          nullable: true
        with_user:
          title: 'Учитывать только данные с пользователем'
          type: boolean
          default: null
          nullable: true
        group_ids:
          title: 'Группы для фильтрации'
          type: array
          items:
            type: string
          default: null
          maxItems: 50
          nullable: true
        sort_by:
          title: 'Сортировка по'
          type: string
          default: name
          enum:
            - name
        sort_type:
          title: 'Тип сортировки'
          type: string
          default: asc
          enum:
            - asc
            - desc
        offset:
          type: integer
          default: 0
          minimum: 0
        limit:
          type: integer
          default: 20
          maximum: 100
          minimum: 0
          nullable: true
        for_role:
          title: 'Роль, для которой фильтруем значения'
          type: string
          default: null
          enum:
            - admin
            - student
            - teacher
            - survey_creator
          nullable: true
      type: object
    GetAvailableUserDataDto:
      properties:
        name:
          title: 'Имя для фильтрации'
          type: string
          default: null
          maxLength: 255
          minLength: 1
          nullable: true
        with_group:
          title: 'Учитывать только данные с группой'
          type: boolean
          default: null
          nullable: true
        group_ids:
          title: 'Группы для фильтрации'
          type: array
          items:
            type: string
          default: null
          maxItems: 50
          nullable: true
        sort_by:
          title: 'Сортировка по'
          type: string
          default: name
          enum:
            - name
        sort_type:
          title: 'Тип сортировки'
          type: string
          default: asc
          enum:
            - asc
            - desc
        offset:
          type: integer
          default: 0
          minimum: 0
        limit:
          type: integer
          default: 20
          maximum: 100
          minimum: 0
          nullable: true
        for_role:
          title: 'Роль, для которой фильтруем значения'
          type: string
          default: null
          enum:
            - admin
            - student
            - teacher
            - survey_creator
          nullable: true
      type: object
    ImportUserDataDto:
      required:
        - for_role
      properties:
        for_role:
          title: Роль
          type: string
          enum:
            - admin
            - student
            - teacher
            - survey_creator
        headers_in_first_row:
          title: 'Находятся ли в первой строке файла заголовки для столбцов'
          type: boolean
          default: true
        last_name_col:
          title: 'Столбец с фамилией'
          type: string
          default: A
        first_name_col:
          title: 'Столбец с именем'
          type: string
          default: B
        patronymic_col:
          title: 'Столбец с отчеством'
          type: string
          default: C
        group_name_col:
          title: 'Столбец с названием группы'
          type: string
          default: D
      type: object
    SuccessResponse:
      properties:
        data:
          type: object
          default: null
          nullable: true
          anyOf:
            -
              type: boolean
            -
              type: integer
            -
              type: number
            -
              type: string
            -
              type: array
              items: {  }
            -
              type: object
              additionalProperties: true
        meta:
          $ref: '#/components/schemas/Meta'
      type: object
    SigningInUser:
      required:
        - credentials
        - user
      properties:
        credentials:
          $ref: '#/components/schemas/UserCredentials'
        user:
          $ref: '#/components/schemas/User'
      type: object
    ErrorResponse:
      required:
        - error
      properties:
        error:
          $ref: '#/components/schemas/Error'
      type: object
    ValidationResponse:
      properties:
        errors:
          type: object
          default: []
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/Error'
      type: object
    User:
      required:
        - id
        - email
        - status
        - deleted
        - permissions
        - roles
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        data:
          nullable: true
          oneOf:
            -
              $ref: '#/components/schemas/UserData'
        status:
          $ref: '#/components/schemas/UserStatusEnum'
        deleted:
          type: boolean
        deleted_at:
          type: string
          format: date-time
          nullable: true
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/PermissionEnum'
        roles:
          type: array
          items:
            $ref: '#/components/schemas/RoleEnum'
      type: object
    UserCredentials:
      required:
        - access_token
        - refresh_token
      properties:
        access_token:
          type: string
          maxLength: 40
          minLength: 40
        refresh_token:
          type: string
          maxLength: 40
          minLength: 40
      type: object
    SuccessWithPaginationResponse:
      properties:
        data:
          $ref: '#/components/schemas/PaginatedData'
        meta:
          $ref: '#/components/schemas/Meta'
      type: object
    Group:
      required:
        - id
        - name
      properties:
        id:
          type: string
        name:
          type: string
      type: object
    CreatedGroupsInfo:
      required:
        - created
      properties:
        created:
          type: integer
      type: object
    Role:
      required:
        - slug
        - name
        - import_enabled
      properties:
        slug:
          $ref: '#/components/schemas/RoleEnum'
        name:
          type: string
        import_enabled:
          type: boolean
      type: object
    Semester:
      required:
        - name
      properties:
        name:
          type: string
      type: object
    StudentSubject:
      required:
        - subject
        - teacher
        - user
        - semester
      properties:
        subject:
          $ref: '#/components/schemas/Subject'
        teacher:
          $ref: '#/components/schemas/LiteUser'
        user:
          $ref: '#/components/schemas/LiteUser'
        semester:
          $ref: '#/components/schemas/Semester'
      type: object
    MyStudentSubject:
      required:
        - subject
        - teacher
        - semester
      properties:
        subject:
          $ref: '#/components/schemas/Subject'
        teacher:
          $ref: '#/components/schemas/LiteUser'
        semester:
          $ref: '#/components/schemas/Semester'
      type: object
    CreatedStudentSubjectsInfo:
      required:
        - created
        - skipped
      properties:
        created:
          type: integer
        skipped:
          type: integer
      type: object
    Subject:
      required:
        - id
        - name
        - semester
      properties:
        id:
          type: string
        name:
          type: string
        semester:
          $ref: '#/components/schemas/Semester'
      type: object
    CreatedSubjectsInfo:
      required:
        - created
      properties:
        created:
          type: integer
      type: object
    LiteMySurvey:
      required:
        - survey
        - completed
        - teacher_subjects
      properties:
        survey:
          $ref: '#/components/schemas/LiteSurvey'
        completed:
          type: boolean
        completed_at:
          type: string
          format: date-time
          nullable: true
        teacher_subjects:
          type: array
          items:
            $ref: '#/components/schemas/TeacherSubject'
      type: object
    MySurvey:
      required:
        - survey
        - completed
        - teacher_subjects
      properties:
        survey:
          $ref: '#/components/schemas/Survey'
        completed:
          type: boolean
        completed_at:
          type: string
          format: date-time
          nullable: true
        teacher_subjects:
          type: array
          items:
            $ref: '#/components/schemas/TeacherSubject'
      type: object
    Survey:
      required:
        - id
        - title
        - subject
        - items
      properties:
        id:
          type: string
        title:
          type: string
        subject:
          $ref: '#/components/schemas/Subject'
        items:
          type: array
          items:
            $ref: '#/components/schemas/SurveyItem'
      type: object
    FullSurvey:
      required:
        - id
        - title
        - subject
        - items
        - status
        - created_at
        - update_at
      properties:
        id:
          type: string
        title:
          type: string
        subject:
          $ref: '#/components/schemas/Subject'
        items:
          type: array
          items:
            $ref: '#/components/schemas/SurveyItem'
        status:
          type: string
        actual_to:
          type: string
          nullable: true
        created_at:
          type: string
        update_at:
          type: string
      type: object
    LiteFullSurvey:
      required:
        - id
        - title
        - subject
        - status
        - created_at
        - update_at
      properties:
        id:
          type: string
        title:
          type: string
        subject:
          $ref: '#/components/schemas/Subject'
        status:
          type: string
        actual_to:
          type: string
          nullable: true
        created_at:
          type: string
        update_at:
          type: string
      type: object
    SurveyStat:
      required:
        - id
        - available_count
        - completed_count
        - items
      properties:
        id:
          type: string
        available_count:
          type: integer
        completed_count:
          type: integer
        items:
          type: array
          items:
            $ref: '#/components/schemas/SurveyStatItem'
      type: object
    LiteSurveyTemplate:
      required:
        - id
        - name
        - title
      properties:
        id:
          type: string
        name:
          type: string
        title:
          type: string
      type: object
    SurveyTemplate:
      required:
        - id
        - name
        - title
        - items
      properties:
        id:
          type: string
        name:
          type: string
        title:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/SurveyTemplateItem'
      type: object
    TeacherSubject:
      required:
        - subject
        - teacher
        - type
      properties:
        subject:
          $ref: '#/components/schemas/Subject'
        teacher:
          $ref: '#/components/schemas/LiteUser'
        type:
          $ref: '#/components/schemas/TeacherSubjectTypeEnum'
      type: object
    MyTeacherSubject:
      required:
        - subject
        - type
        - students_count
      properties:
        subject:
          $ref: '#/components/schemas/Subject'
        type:
          $ref: '#/components/schemas/TeacherSubjectTypeEnum'
        students_count:
          type: integer
      type: object
    CreatedTeacherSubjectsInfo:
      required:
        - created
      properties:
        created:
          type: integer
      type: object
    UpdatedUsersInfo:
      required:
        - updated
      properties:
        updated:
          type: integer
      type: object
    CreatedUsersInfo:
      required:
        - created
        - fetch_url
        - export_url
      properties:
        created:
          type: integer
        fetch_url:
          title: 'Адрес, по которому можно получить список созданных пользователей'
          type: string
          format: url
        export_url:
          title: 'Адрес, по которому можно скачать выгрузку по созданным пользователям'
          type: string
          format: url
      type: object
    UserData:
      required:
        - id
        - first_name
        - last_name
      properties:
        id:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        patronymic:
          type: string
          nullable: true
        group:
          nullable: true
          oneOf:
            -
              $ref: '#/components/schemas/Group'
      type: object
    CreatedUserDataInfo:
      required:
        - created
      properties:
        created:
          type: integer
      type: object
    AnswerDataDtoInterface:
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/SurveyItemTypeEnum'
      type: object
      discriminator:
        propertyName: type
        mapping:
          comment: '#/components/schemas/CommentAnswerDataDto'
          choice: '#/components/schemas/ChoiceAnswerDataDto'
          multi_choice: '#/components/schemas/MultiChoiceAnswerDataDto'
          rating: '#/components/schemas/RatingAnswerDataDto'
      oneOf:
        -
          $ref: '#/components/schemas/CommentAnswerDataDto'
        -
          $ref: '#/components/schemas/ChoiceAnswerDataDto'
        -
          $ref: '#/components/schemas/MultiChoiceAnswerDataDto'
        -
          $ref: '#/components/schemas/RatingAnswerDataDto'
    CreateItemDto:
      required:
        - answer_required
        - type
        - text
        - position
        - data
        - subject_type
      properties:
        answer_required:
          title: 'Обязательность ответа'
          type: boolean
        type:
          $ref: '#/components/schemas/SurveyItemTypeEnum'
        text:
          title: 'Текст вопроса'
          type: string
        position:
          title: Позиция
          type: integer
        data:
          $ref: '#/components/schemas/ItemDataInterface'
        subject_type:
          $ref: '#/components/schemas/TeacherSubjectTypeEnum'
      type: object
    UpdateItemDto:
      required:
        - answer_required
        - type
        - text
        - position
        - data
        - subject_type
      properties:
        answer_required:
          title: 'Обязательность ответа'
          type: boolean
        type:
          $ref: '#/components/schemas/SurveyItemTypeEnum'
        text:
          title: 'Текст вопроса'
          type: string
        position:
          title: Позиция
          type: integer
        data:
          $ref: '#/components/schemas/ItemDataInterface'
        subject_type:
          $ref: '#/components/schemas/TeacherSubjectTypeEnum'
        id:
          title: 'ID вопроса'
          type: string
          default: null
          nullable: true
      type: object
    CreateTemplateItemDto:
      required:
        - answer_required
        - type
        - text
        - position
        - data
        - subject_type
      properties:
        answer_required:
          title: 'Обязательность ответа'
          type: boolean
        type:
          $ref: '#/components/schemas/SurveyItemTypeEnum'
        text:
          title: 'Текст вопроса'
          type: string
        position:
          title: Позиция
          type: integer
        data:
          $ref: '#/components/schemas/ItemDataInterface'
        subject_type:
          $ref: '#/components/schemas/TeacherSubjectTypeEnum'
      type: object
    Meta:
      required:
        - mode
      properties:
        mode:
          type: string
      type: object
    Error:
      required:
        - slug
        - message
      properties:
        slug:
          type: string
        message:
          type: string
      type: object
    UserStatusEnum:
      type: string
      enum:
        - draft
        - active
    PermissionEnum:
      type: string
      enum:
        - survey.view
        - survey.view_my
        - survey.complete
        - survey.create
        - survey.update
        - survey.delete
        - survey.view_result
        - survey.view_all
        - user.create
        - user.view
        - user.export
        - user.update_all
        - user_data.import
        - user_data.view_all
        - group.create
        - group.import
        - subject.create
        - subject.import
        - student_subject.view_all
        - student_subject.view_my
        - student_subject.import
        - role.view_all
        - teacher_subject.view_all
        - teacher_subject.view_my
        - teacher_subject.import
        - semester.create
        - survey_template.view
        - survey_template.create
        - survey_template.update
        - survey_template.delete
        - survey_template.view_all
        - survey_stat.view
    RoleEnum:
      type: string
      enum:
        - admin
        - student
        - teacher
        - survey_creator
    PaginatedData:
      properties:
        items:
          type: array
          items: {  }
          default: []
        offset:
          type: integer
          default: 0
        limit:
          type: integer
          default: 0
        count:
          type: integer
          default: 0
        sort_by:
          type: string
          default: null
          nullable: true
        sort_type:
          type: string
          default: null
          nullable: true
      type: object
    LiteUser:
      required:
        - id
        - email
        - roles
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        data:
          nullable: true
          oneOf:
            -
              $ref: '#/components/schemas/UserData'
        roles:
          type: array
          items:
            $ref: '#/components/schemas/RoleEnum'
      type: object
    LiteSurvey:
      required:
        - id
        - title
        - subject
      properties:
        id:
          type: string
        title:
          type: string
        subject:
          $ref: '#/components/schemas/Subject'
      type: object
    SurveyItem:
      required:
        - id
        - survey_id
        - answer_required
        - type
        - text
        - position
        - data
        - subject_type
      properties:
        id:
          type: string
        survey_id:
          type: string
        answer_required:
          type: boolean
        type:
          $ref: '#/components/schemas/SurveyItemTypeEnum'
        text:
          type: string
        position:
          type: integer
        data:
          $ref: '#/components/schemas/ItemDataInterface2'
        subject_type:
          $ref: '#/components/schemas/TeacherSubjectTypeEnum'
      type: object
    SurveyStatItem:
      required:
        - id
        - text
        - available_count
        - completed_count
        - type
        - stats
      properties:
        id:
          type: string
        text:
          type: string
        available_count:
          type: integer
        completed_count:
          type: integer
        type:
          type: string
        stats:
          type: array
          items:
            $ref: '#/components/schemas/StatDataInterface'
      type: object
    SurveyTemplateItem:
      required:
        - id
        - survey_template_id
        - answer_required
        - type
        - text
        - position
        - data
        - subject_type
      properties:
        id:
          type: string
        survey_template_id:
          type: string
        answer_required:
          type: boolean
        type:
          $ref: '#/components/schemas/SurveyItemTypeEnum'
        text:
          type: string
        position:
          type: integer
        data:
          $ref: '#/components/schemas/ItemDataInterface2'
        subject_type:
          $ref: '#/components/schemas/TeacherSubjectTypeEnum'
      type: object
    TeacherSubjectTypeEnum:
      type: string
      enum:
        - lecture
        - practical_lesson
        - laboratory_lesson
        - course_paper
    CommentAnswerDataDto:
      required:
        - comment
        - type
      properties:
        comment:
          type: string
        type:
          type: string
      type: object
    ChoiceAnswerDataDto:
      required:
        - choice
        - type
      properties:
        choice:
          type: string
        type:
          type: string
      type: object
    MultiChoiceAnswerDataDto:
      required:
        - choices
        - type
      properties:
        choices:
          type: array
          items:
            type: string
        type:
          type: string
      type: object
    RatingAnswerDataDto:
      required:
        - rating
        - type
      properties:
        rating:
          type: integer
        type:
          type: string
      type: object
    SurveyItemTypeEnum:
      type: string
      enum:
        - choice
        - multi_choice
        - comment
        - rating
    ItemDataInterface:
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/SurveyItemTypeEnum'
      type: object
      discriminator:
        propertyName: type
        mapping:
          comment: '#/components/schemas/CommentItemData'
          choice: '#/components/schemas/ChoiceItemData'
          multi_choice: '#/components/schemas/MultiChoiceItemData'
          rating: '#/components/schemas/RatingItemData'
      oneOf:
        -
          $ref: '#/components/schemas/CommentItemData'
        -
          $ref: '#/components/schemas/ChoiceItemData'
        -
          $ref: '#/components/schemas/MultiChoiceItemData'
        -
          $ref: '#/components/schemas/RatingItemData'
    ItemDataInterface2:
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/SurveyItemTypeEnum'
      type: object
      discriminator:
        propertyName: type
        mapping:
          comment: '#/components/schemas/CommentItemData2'
          choice: '#/components/schemas/ChoiceItemData2'
          multi_choice: '#/components/schemas/MultiChoiceItemData2'
          rating: '#/components/schemas/RatingItemData2'
      oneOf:
        -
          $ref: '#/components/schemas/CommentItemData2'
        -
          $ref: '#/components/schemas/ChoiceItemData2'
        -
          $ref: '#/components/schemas/MultiChoiceItemData2'
        -
          $ref: '#/components/schemas/RatingItemData2'
    StatDataInterface:
      required:
        - type
        - available_count
        - completed_count
      properties:
        type:
          $ref: '#/components/schemas/SurveyItemTypeEnum'
        teacher_name:
          type: string
          nullable: true
        teacher_id:
          type: string
          nullable: true
        available_count:
          type: integer
        completed_count:
          type: integer
      type: object
      discriminator:
        propertyName: type
        mapping:
          comment: '#/components/schemas/CommentStatData'
          choice: '#/components/schemas/ChoiceStatData'
          multi_choice: '#/components/schemas/MultiChoiceStatData'
          rating: '#/components/schemas/RatingStatData'
      oneOf:
        -
          $ref: '#/components/schemas/CommentStatData'
        -
          $ref: '#/components/schemas/ChoiceStatData'
        -
          $ref: '#/components/schemas/MultiChoiceStatData'
        -
          $ref: '#/components/schemas/RatingStatData'
    CommentItemData:
      required:
        - type
        - max_length
      properties:
        type:
          $ref: '#/components/schemas/SurveyItemTypeEnum'
        placeholder:
          type: string
          nullable: true
        max_length:
          type: integer
      type: object
    ChoiceItemData:
      required:
        - type
        - choices
      properties:
        type:
          $ref: '#/components/schemas/SurveyItemTypeEnum'
        choices:
          type: array
          items:
            $ref: '#/components/schemas/Choice'
      type: object
    MultiChoiceItemData:
      required:
        - type
        - choices
      properties:
        type:
          $ref: '#/components/schemas/SurveyItemTypeEnum'
        choices:
          type: array
          items:
            $ref: '#/components/schemas/Choice'
      type: object
    RatingItemData:
      required:
        - type
        - min
        - max
      properties:
        type:
          $ref: '#/components/schemas/SurveyItemTypeEnum'
        min:
          type: integer
        max:
          type: integer
      type: object
    CommentItemData2:
      required:
        - type
        - max_length
      properties:
        type:
          $ref: '#/components/schemas/SurveyItemTypeEnum'
        placeholder:
          type: string
          nullable: true
        max_length:
          type: integer
      type: object
    ChoiceItemData2:
      required:
        - type
        - choices
      properties:
        type:
          $ref: '#/components/schemas/SurveyItemTypeEnum'
        choices:
          type: array
          items:
            $ref: '#/components/schemas/Choice2'
      type: object
    MultiChoiceItemData2:
      required:
        - type
        - choices
      properties:
        type:
          $ref: '#/components/schemas/SurveyItemTypeEnum'
        choices:
          type: array
          items:
            $ref: '#/components/schemas/Choice2'
      type: object
    RatingItemData2:
      required:
        - type
        - min
        - max
      properties:
        type:
          $ref: '#/components/schemas/SurveyItemTypeEnum'
        min:
          type: integer
        max:
          type: integer
      type: object
    CommentStatData:
      required:
        - type
        - completed_count
        - available_count
        - summary
      properties:
        type:
          type: string
        teacher_id:
          type: string
          nullable: true
        teacher_name:
          type: string
          nullable: true
        completed_count:
          type: integer
        available_count:
          type: integer
        summary:
          type: string
      type: object
    ChoiceStatData:
      required:
        - type
        - completed_count
        - available_count
        - counts
      properties:
        type:
          type: string
        teacher_id:
          type: string
          nullable: true
        teacher_name:
          type: string
          nullable: true
        completed_count:
          type: integer
        available_count:
          type: integer
        counts:
          type: array
          items:
            $ref: '#/components/schemas/ChoiceCount'
      type: object
    MultiChoiceStatData:
      required:
        - type
        - completed_count
        - available_count
        - counts
      properties:
        type:
          type: string
        teacher_id:
          type: string
          nullable: true
        teacher_name:
          type: string
          nullable: true
        completed_count:
          type: integer
        available_count:
          type: integer
        counts:
          type: array
          items:
            $ref: '#/components/schemas/ChoiceCount'
      type: object
    RatingStatData:
      required:
        - type
        - completed_count
        - available_count
        - counts
        - average
      properties:
        type:
          type: string
        teacher_id:
          type: string
          nullable: true
        teacher_name:
          type: string
          nullable: true
        completed_count:
          type: integer
        available_count:
          type: integer
        counts:
          type: array
          items:
            $ref: '#/components/schemas/RatingCount'
        average:
          type: number
          format: float
      type: object
    Choice:
      required:
        - text
        - value
      properties:
        text:
          title: Описание
          type: string
        value:
          title: Значение
          type: string
      type: object
    Choice2:
      required:
        - text
        - value
      properties:
        text:
          type: string
        value:
          type: string
      type: object
    ChoiceCount:
      required:
        - count
        - choice
      properties:
        count:
          type: integer
        choice:
          type: string
      type: object
    RatingCount:
      required:
        - count
        - rating
      properties:
        count:
          type: integer
        rating:
          type: integer
      type: object
  securitySchemes:
    Bearer:
      type: http
      bearerFormat: JWT
      scheme: bearer
security:
  -
    Bearer: []
tags:
  -
    name: health
    description: 'Ручки для проверки работоспособности сервера'
  -
    name: auth
    description: 'Ручки для авторизации и аутентификации'
  -
    name: user-data
    description: 'Ручки для работы с данными пользователей'
  -
    name: groups
    description: 'Ручки для работы с группами'
  -
    name: me
    description: 'Ручки для работы с "собой"'
  -
    name: users
    description: 'Ручки для работы с пользователями'
  -
    name: subjects
    description: 'Ручки для работы с предметами'
  -
    name: student-subjects
    description: 'Ручки для работы с предметами, привязанными к студентам'
  -
    name: teacher-subjects
    description: 'Ручки для работы с предметами, привязанными к преподавателям'
  -
    name: roles
    description: 'Ручки для получения ролей'
  -
    name: surveys
    description: 'Ручки для работы с опросами'
  -
    name: semesters
    description: 'Ручки для работы с семестрами'
  -
    name: survey-stats
    description: 'Ручки для работы со статистикой по опросам'
  -
    name: survey-templates

