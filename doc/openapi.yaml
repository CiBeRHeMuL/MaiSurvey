openapi: 3.0.0
info:
  title: 'MAI Survey Service'
  description: 'MAI Survey Service'
  version: 1.0.0
servers:
  -
    url: 'https://mai-survey.net'
  -
    url: 'http://mai-survey.loc'
    description: 'Local development server'
paths:
  /auth/sign-in:
    post:
      tags:
        - auth
      summary: 'Вход в приложение.'
      operationId: post_sign-in
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessResponse' }
                  - { properties: { data: { $ref: '#/components/schemas/SigningInUser' } }, type: object }
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security: []
  /auth/sign-up/1:
    post:
      tags:
        - auth
      summary: 'Регистрация в приложении. Шаг 1'
      operationId: post_sign-up-1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpStep1Dto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessResponse' }
                  - { properties: { data: { $ref: '#/components/schemas/SigningInUser' } }, type: object }
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security: []
  /auth/sign-up/2:
    post:
      tags:
        - auth
      summary: 'Регистрация в приложении. Шаг 2 (Персональные данные)'
      operationId: post_sign-up-2
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpStep2Dto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessResponse' }
                  - { properties: { data: { $ref: '#/components/schemas/User' } }, type: object }
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/refresh:
    put:
      tags:
        - auth
      summary: 'Обновить токен доступа.'
      operationId: put_refresh-credentials
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshCredentialsDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessResponse' }
                  - { properties: { data: { $ref: '#/components/schemas/UserCredentials' } }, type: object }
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security: []
  /groups:
    get:
      tags:
        - groups
      summary: 'Получить список групп с фильтрацией и пагинацией.'
      operationId: get_get-all-groups
      parameters:
        -
          name: name
          in: query
          required: false
          schema:
            title: 'Название для фильтрации'
            type: string
            default: null
            maxLength: 255
            minLength: 1
            nullable: true
        -
          name: sort_by
          in: query
          required: false
          schema:
            title: 'Сортировка по'
            type: string
            default: name
            enum:
              - name
        -
          name: sort_type
          in: query
          required: false
          schema:
            title: 'Тип сортировки'
            type: string
            default: asc
            enum:
              - asc
              - desc
        -
          name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        -
          name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 20
            maximum: 100
            minimum: 0
            nullable: true
      responses:
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessWithPaginationResponse' }
                  - { properties: { data: { properties: { items: { type: array, items: { $ref: '#/components/schemas/Group' } } }, type: object } }, type: object }
  /group:
    post:
      tags:
        - groups
      summary: 'Создать группу'
      operationId: post_create-group
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGroupDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessResponse' }
                  - { properties: { data: { $ref: '#/components/schemas/Group' } }, type: object }
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /groups/import:
    post:
      tags:
        - groups
      summary: 'Импорт групп'
      operationId: post_import-groups
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              allOf:
                -
                  $ref: '#/components/schemas/ImportGroupsDto'
                -
                  properties: { file: { type: string, format: binary } }
                  type: object
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessResponse' }
                  - { properties: { data: { $ref: '#/components/schemas/CreatedGroupsInfo' } }, type: object }
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /health:
    get:
      tags:
        - health
      summary: 'Проверка того, что сервер в рабочем состоянии'
      operationId: get_check-health
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
      security: []
  /me:
    get:
      tags:
        - me
      summary: 'Информация обо мне.'
      operationId: get_get-me
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessResponse' }
                  - { properties: { data: { $ref: '#/components/schemas/User' } }, type: object }
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /subjects:
    get:
      tags:
        - subjects
      summary: 'Получить список предметов с фильтрацией и пагинацией.'
      operationId: get_get-all-subjects
      parameters:
        -
          name: name
          in: query
          required: false
          schema:
            title: 'Название для фильтрации'
            type: string
            default: null
            maxLength: 255
            minLength: 1
            nullable: true
        -
          name: sort_by
          in: query
          required: false
          schema:
            title: 'Сортировка по'
            type: string
            default: name
            enum:
              - name
        -
          name: sort_type
          in: query
          required: false
          schema:
            title: 'Тип сортировки'
            type: string
            default: asc
            enum:
              - asc
              - desc
        -
          name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        -
          name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 20
            maximum: 100
            minimum: 0
            nullable: true
      responses:
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessWithPaginationResponse' }
                  - { properties: { data: { properties: { items: { type: array, items: { $ref: '#/components/schemas/Subject' } } }, type: object } }, type: object }
  /subject:
    post:
      tags:
        - subjects
      summary: 'Создать предмет'
      operationId: post_create-subject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSubjectDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessResponse' }
                  - { properties: { data: { $ref: '#/components/schemas/Subject' } }, type: object }
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /subjects/import:
    post:
      tags:
        - subjects
      summary: 'Импорт предметов'
      operationId: post_import-subjects
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              allOf:
                -
                  $ref: '#/components/schemas/ImportSubjectsDto'
                -
                  properties: { file: { type: string, format: binary } }
                  type: object
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessResponse' }
                  - { properties: { data: { $ref: '#/components/schemas/CreatedSubjectsInfo' } }, type: object }
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /user:
    post:
      tags:
        - user
      summary: 'Создание пользователя'
      operationId: post_create-full-user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFullUserDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessResponse' }
                  - { properties: { data: { $ref: '#/components/schemas/User' } }, type: object }
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users:
    get:
      tags:
        - user
      summary: 'Получить всех пользователей с пагинацией и сортировкой'
      operationId: get_get-all-users
      parameters:
        -
          name: 'roles[]'
          in: query
          required: false
          schema:
            title: 'Роли для фильтрации'
            type: array
            items: {  }
            default: null
            maxItems: 50
            nullable: true
        -
          name: name
          in: query
          required: false
          schema:
            title: 'Имя для фильтрации'
            type: string
            default: null
            maxLength: 255
            minLength: 1
            nullable: true
        -
          name: email
          in: query
          required: false
          schema:
            title: 'Почта для фильтрации'
            type: string
            default: null
            maxLength: 255
            minLength: 1
            nullable: true
        -
          name: deleted
          in: query
          required: false
          schema:
            title: 'Фильтр по метке удаления'
            type: boolean
            default: null
            nullable: true
        -
          name: status
          in: query
          required: false
          schema:
            title: 'Статус для фильтрации'
            type: string
            default: null
            enum:
              - draft
              - active
            nullable: true
        -
          name: 'group_ids[]'
          in: query
          required: false
          schema:
            title: 'Группы для фильтрации'
            type: array
            items: {  }
            default: null
            maxItems: 50
            nullable: true
        -
          name: with_group
          in: query
          required: false
          schema:
            title: 'Фильтровать только пользователей с группой'
            type: boolean
            default: null
            nullable: true
        -
          name: created_from
          in: query
          required: false
          schema:
            title: 'Создан после'
            type: string
            default: null
            nullable: true
        -
          name: created_to
          in: query
          required: false
          schema:
            title: 'Создан до'
            type: string
            default: null
            nullable: true
        -
          name: sort_by
          in: query
          required: false
          schema:
            title: 'Сортировка по'
            type: string
            default: name
            enum:
              - name
              - created_at
              - deleted
              - email
        -
          name: sort_type
          in: query
          required: false
          schema:
            title: 'Тип сортировки'
            type: string
            default: asc
            enum:
              - asc
              - desc
        -
          name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        -
          name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 100
            maximum: 100
            minimum: 0
            nullable: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessWithPaginationResponse' }
                  - { properties: { data: { properties: { items: { type: array, items: { $ref: '#/components/schemas/User' } } }, type: object } }, type: object }
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/users/export/{exportType}':
    get:
      tags:
        - user
      summary: 'Экспорт пользователей в файл'
      operationId: get_users-export-to-file
      parameters:
        -
          name: exportType
          in: path
          required: true
          schema:
            type: string
            pattern: xlsx|csv
            enum:
              - xlsx
              - csv
        -
          name: 'roles[]'
          in: query
          required: false
          schema:
            title: 'Роли для фильтрации'
            type: array
            items: {  }
            default: null
            maxItems: 50
            nullable: true
        -
          name: name
          in: query
          required: false
          schema:
            title: 'Имя для фильтрации'
            type: string
            default: null
            maxLength: 255
            minLength: 1
            nullable: true
        -
          name: email
          in: query
          required: false
          schema:
            title: 'Почта для фильтрации'
            type: string
            default: null
            maxLength: 255
            minLength: 1
            nullable: true
        -
          name: deleted
          in: query
          required: false
          schema:
            title: 'Фильтр по метке удаления'
            type: boolean
            default: null
            nullable: true
        -
          name: status
          in: query
          required: false
          schema:
            title: 'Статус для фильтрации'
            type: string
            default: null
            enum:
              - draft
              - active
            nullable: true
        -
          name: 'group_ids[]'
          in: query
          required: false
          schema:
            title: 'Группы для фильтрации'
            type: array
            items: {  }
            default: null
            maxItems: 50
            nullable: true
        -
          name: with_group
          in: query
          required: false
          schema:
            title: 'Фильтровать только пользователей с группой'
            type: boolean
            default: null
            nullable: true
        -
          name: created_from
          in: query
          required: false
          schema:
            title: 'Создан после'
            type: string
            default: null
            nullable: true
        -
          name: created_to
          in: query
          required: false
          schema:
            title: 'Создан до'
            type: string
            default: null
            nullable: true
        -
          name: sort_by
          in: query
          required: false
          schema:
            title: 'Сортировка по'
            type: string
            default: name
            enum:
              - name
              - created_at
              - deleted
              - email
        -
          name: sort_type
          in: query
          required: false
          schema:
            title: 'Тип сортировки'
            type: string
            default: asc
            enum:
              - asc
              - desc
        -
          name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        -
          name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 100
            maximum: 100
            minimum: 0
            nullable: true
      responses:
        '200':
          description: Ok
          content:
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
            text/csv:
              schema:
                type: string
                format: binary
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /user-data/all:
    get:
      tags:
        - user-data
      summary: 'Получить полный список данных пользователей с фильтрацией и пагинацией.'
      operationId: get_get-all-user-data
      parameters:
        -
          name: name
          in: query
          required: false
          schema:
            title: 'Имя для фильтрации'
            type: string
            default: null
            maxLength: 255
            minLength: 1
            nullable: true
        -
          name: with_group
          in: query
          required: false
          schema:
            title: 'Учитывать только данные с группой'
            type: boolean
            default: null
        -
          name: with_user
          in: query
          required: false
          schema:
            title: 'Учитывать только данные с пользователем'
            type: boolean
            default: null
            nullable: true
        -
          name: 'group_ids[]'
          in: query
          required: false
          schema:
            title: 'Группы для фильтрации'
            type: array
            items:
              type: string
            default: null
            maxItems: 50
            nullable: true
        -
          name: sort_by
          in: query
          required: false
          schema:
            title: 'Сортировка по'
            type: string
            default: name
            enum:
              - name
        -
          name: sort_type
          in: query
          required: false
          schema:
            title: 'Тип сортировки'
            type: string
            default: asc
            enum:
              - asc
              - desc
        -
          name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        -
          name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 20
            maximum: 100
            minimum: 0
            nullable: true
        -
          name: for_role
          in: query
          required: false
          schema:
            title: 'Роль, для которой фильтруем значения'
            type: string
            default: null
            enum:
              - admin
              - student
              - teacher
              - survey_creator
            nullable: true
      responses:
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessWithPaginationResponse' }
                  - { properties: { data: { properties: { items: { type: array, items: { $ref: '#/components/schemas/UserData' } } }, type: object } }, type: object }
  /user-data/available:
    get:
      tags:
        - user-data
      summary: 'Получить доступный для привязки список данных пользователей с фильтрацией и пагинацией.'
      operationId: get_get-available-user-data
      parameters:
        -
          name: name
          in: query
          required: false
          schema:
            title: 'Имя для фильтрации'
            type: string
            default: null
            maxLength: 255
            minLength: 1
            nullable: true
        -
          name: with_group
          in: query
          required: false
          schema:
            title: 'Учитывать только данные с группой'
            type: boolean
            default: null
        -
          name: 'group_ids[]'
          in: query
          required: false
          schema:
            title: 'Группы для фильтрации'
            type: array
            items:
              type: string
            default: null
            maxItems: 50
            nullable: true
        -
          name: sort_by
          in: query
          required: false
          schema:
            title: 'Сортировка по'
            type: string
            default: name
            enum:
              - name
        -
          name: sort_type
          in: query
          required: false
          schema:
            title: 'Тип сортировки'
            type: string
            default: asc
            enum:
              - asc
              - desc
        -
          name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        -
          name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 20
            maximum: 100
            minimum: 0
            nullable: true
        -
          name: for_role
          in: query
          required: false
          schema:
            title: 'Роль, для которой фильтруем значения'
            type: string
            default: null
            enum:
              - admin
              - student
              - teacher
              - survey_creator
            nullable: true
      responses:
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessWithPaginationResponse' }
                  - { properties: { data: { properties: { items: { type: array, items: { $ref: '#/components/schemas/UserData' } } }, type: object } }, type: object }
  /user-data/import:
    post:
      tags:
        - user-data
      summary: 'Импорт данных пользователей'
      operationId: post_import-user-data
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              allOf:
                -
                  $ref: '#/components/schemas/ImportUserDataDto'
                -
                  properties: { file: { type: string, format: binary } }
                  type: object
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessResponse' }
                  - { properties: { data: { $ref: '#/components/schemas/CreatedUserDataInfo' } }, type: object }
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /user-subjects:
    get:
      tags:
        - user-subjects
      summary: 'Список предметов пользователей с пагинацией и фильтрацией'
      operationId: get_get-all-user-subjects
      parameters:
        -
          name: 'user_ids[]'
          in: query
          required: false
          schema:
            title: 'Пользователи для фильтрации'
            type: array
            items: {  }
            default: null
            maxItems: 50
            nullable: true
        -
          name: 'teacher_ids[]'
          in: query
          required: false
          schema:
            title: 'Преподаватели для фильтрации'
            type: array
            items: {  }
            default: null
            maxItems: 50
            nullable: true
        -
          name: 'subject_ids[]'
          in: query
          required: false
          schema:
            title: 'Предметы для фильтрации'
            type: array
            items: {  }
            default: null
            maxItems: 50
            nullable: true
        -
          name: is_actual_from
          in: query
          required: false
          schema:
            title: 'Был актуален с'
            type: string
            nullable: true
        -
          name: is_actual_to
          in: query
          required: false
          schema:
            title: 'Был актуален до'
            type: string
            nullable: true
        -
          name: sort_by
          in: query
          required: false
          schema:
            title: 'Сортировка по'
            type: string
            default: name
            enum:
              - name
              - actual_from
              - actual_to
        -
          name: sort_type
          in: query
          required: false
          schema:
            title: 'Тип сортировки'
            type: string
            default: asc
            enum:
              - asc
              - desc
        -
          name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        -
          name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 100
            maximum: 100
            minimum: 0
            nullable: true
      responses:
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessWithPaginationResponse' }
                  - { properties: { data: { properties: { items: { type: array, items: { $ref: '#/components/schemas/UserSubject' } } }, type: object } }, type: object }
  /user-subjects/my:
    get:
      tags:
        - user-subjects
      summary: 'Список моих предметов с пагинацией и фильтрацией'
      operationId: get_get-my-user-subjects
      parameters:
        -
          name: actual
          in: query
          required: false
          schema:
            title: 'Актуален ли предмет на текущий момент'
            type: boolean
            default: null
            nullable: true
        -
          name: 'subject_ids[]'
          in: query
          required: false
          schema:
            title: 'Предметы для фильтрации'
            type: array
            items: {  }
            default: null
            maxItems: 50
            nullable: true
        -
          name: sort_by
          in: query
          required: false
          schema:
            title: 'Сортировка по'
            type: string
            default: name
            enum:
              - name
              - actual_from
              - actual_to
        -
          name: sort_type
          in: query
          required: false
          schema:
            title: 'Тип сортировки'
            type: string
            default: asc
            enum:
              - asc
              - desc
        -
          name: offset
          in: query
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        -
          name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 100
            maximum: 100
            minimum: 0
            nullable: true
      responses:
        '500':
          description: 'Internal Server Error'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: 'Unprocessable Entity'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '400':
          description: 'Bad Request'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 'Not Found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - { $ref: '#/components/schemas/SuccessWithPaginationResponse' }
                  - { properties: { data: { properties: { items: { type: array, items: { $ref: '#/components/schemas/MyUserSubject' } } }, type: object } }, type: object }
components:
  schemas:
    SignInDto:
      required:
        - email
        - password
      properties:
        email:
          title: Почта
          type: string
        password:
          title: Пароль
          type: string
      type: object
    SignUpStep1Dto:
      required:
        - email
        - password
        - repeat_password
      properties:
        email:
          title: Почта
          type: string
        password:
          title: Пароль
          type: string
        repeat_password:
          title: 'Повторный пароль'
          type: string
      type: object
    SignUpStep2Dto:
      required:
        - user_data_id
      properties:
        user_data_id:
          title: 'ID данных пользователя'
          type: string
      type: object
    RefreshCredentialsDto:
      required:
        - refresh_token
      properties:
        refresh_token:
          title: 'Токен для обновления'
          type: string
      type: object
    GetAllGroupsDto:
      properties:
        name:
          title: 'Название для фильтрации'
          type: string
          default: null
          maxLength: 255
          minLength: 1
          nullable: true
        sort_by:
          title: 'Сортировка по'
          type: string
          default: name
          enum:
            - name
        sort_type:
          title: 'Тип сортировки'
          type: string
          default: asc
          enum:
            - asc
            - desc
        offset:
          type: integer
          default: 0
          minimum: 0
        limit:
          type: integer
          default: 20
          maximum: 100
          minimum: 0
          nullable: true
      type: object
    CreateGroupDto:
      required:
        - name
      properties:
        name:
          title: 'Название группы'
          type: string
          maxLength: 255
      type: object
    ImportGroupsDto:
      properties:
        headers_in_first_row:
          title: 'Находятся ли в первой строке файла заголовки для столбцов'
          type: boolean
          default: true
        name_col:
          title: 'Столбец с названием'
          type: string
          default: A
      type: object
    GetAllSubjectsDto:
      properties:
        name:
          title: 'Название для фильтрации'
          type: string
          default: null
          maxLength: 255
          minLength: 1
          nullable: true
        sort_by:
          title: 'Сортировка по'
          type: string
          default: name
          enum:
            - name
        sort_type:
          title: 'Тип сортировки'
          type: string
          default: asc
          enum:
            - asc
            - desc
        offset:
          type: integer
          default: 0
          minimum: 0
        limit:
          type: integer
          default: 20
          maximum: 100
          minimum: 0
          nullable: true
      type: object
    CreateSubjectDto:
      required:
        - name
      properties:
        name:
          title: 'Название предмета'
          type: string
          maxLength: 255
      type: object
    ImportSubjectsDto:
      properties:
        headers_in_first_row:
          title: 'Находятся ли в первой строке файла заголовки для столбцов'
          type: boolean
          default: true
        name_col:
          title: 'Столбец с названием'
          type: string
          default: A
      type: object
    CreateFullUserDto:
      required:
        - email
        - password
        - role
        - first_name
        - last_name
      properties:
        email:
          title: Почта
          type: string
        password:
          title: Пароль
          type: string
        role:
          title: Роль
          type: string
          enum:
            - admin
            - student
            - teacher
            - survey_creator
        first_name:
          title: Имя
          type: string
          maxLength: 255
        last_name:
          title: Фамилия
          type: string
          maxLength: 255
        patronymic:
          title: Отчество
          type: string
          maxLength: 255
          nullable: true
        group_id:
          title: Группа
          type: string
          nullable: true
      type: object
    GetAllDto:
      properties:
        roles:
          title: 'Роли для фильтрации'
          type: array
          items: {  }
          default: null
          maxItems: 50
          nullable: true
        name:
          title: 'Имя для фильтрации'
          type: string
          default: null
          maxLength: 255
          minLength: 1
          nullable: true
        email:
          title: 'Почта для фильтрации'
          type: string
          default: null
          maxLength: 255
          minLength: 1
          nullable: true
        deleted:
          title: 'Фильтр по метке удаления'
          type: boolean
          default: null
          nullable: true
        status:
          title: 'Статус для фильтрации'
          type: string
          default: null
          enum:
            - draft
            - active
          nullable: true
        group_ids:
          title: 'Группы для фильтрации'
          type: array
          items: {  }
          default: null
          maxItems: 50
          nullable: true
        with_group:
          title: 'Фильтровать только пользователей с группой'
          type: boolean
          default: null
          nullable: true
        created_from:
          title: 'Создан после'
          type: string
          default: null
          nullable: true
        created_to:
          title: 'Создан до'
          type: string
          default: null
          nullable: true
        sort_by:
          title: 'Сортировка по'
          type: string
          default: name
          enum:
            - name
            - created_at
            - deleted
            - email
        sort_type:
          title: 'Тип сортировки'
          type: string
          default: asc
          enum:
            - asc
            - desc
        offset:
          type: integer
          default: 0
          minimum: 0
        limit:
          type: integer
          default: 100
          maximum: 100
          minimum: 0
          nullable: true
      type: object
    GetAllUserDataDto:
      properties:
        name:
          title: 'Имя для фильтрации'
          type: string
          default: null
          maxLength: 255
          minLength: 1
          nullable: true
        with_group:
          title: 'Учитывать только данные с группой'
          type: boolean
          default: null
        with_user:
          title: 'Учитывать только данные с пользователем'
          type: boolean
          default: null
          nullable: true
        group_ids:
          title: 'Группы для фильтрации'
          type: array
          items:
            type: string
          default: null
          maxItems: 50
          nullable: true
        sort_by:
          title: 'Сортировка по'
          type: string
          default: name
          enum:
            - name
        sort_type:
          title: 'Тип сортировки'
          type: string
          default: asc
          enum:
            - asc
            - desc
        offset:
          type: integer
          default: 0
          minimum: 0
        limit:
          type: integer
          default: 20
          maximum: 100
          minimum: 0
          nullable: true
        for_role:
          title: 'Роль, для которой фильтруем значения'
          type: string
          default: null
          enum:
            - admin
            - student
            - teacher
            - survey_creator
          nullable: true
      type: object
    GetAvailableUserDataDto:
      properties:
        name:
          title: 'Имя для фильтрации'
          type: string
          default: null
          maxLength: 255
          minLength: 1
          nullable: true
        with_group:
          title: 'Учитывать только данные с группой'
          type: boolean
          default: null
        group_ids:
          title: 'Группы для фильтрации'
          type: array
          items:
            type: string
          default: null
          maxItems: 50
          nullable: true
        sort_by:
          title: 'Сортировка по'
          type: string
          default: name
          enum:
            - name
        sort_type:
          title: 'Тип сортировки'
          type: string
          default: asc
          enum:
            - asc
            - desc
        offset:
          type: integer
          default: 0
          minimum: 0
        limit:
          type: integer
          default: 20
          maximum: 100
          minimum: 0
          nullable: true
        for_role:
          title: 'Роль, для которой фильтруем значения'
          type: string
          default: null
          enum:
            - admin
            - student
            - teacher
            - survey_creator
          nullable: true
      type: object
    ImportUserDataDto:
      required:
        - for_role
      properties:
        for_role:
          title: Роль
          type: string
          enum:
            - admin
            - student
            - teacher
            - survey_creator
        headers_in_first_row:
          title: 'Находятся ли в первой строке файла заголовки для столбцов'
          type: boolean
          default: true
        last_name_col:
          title: 'Столбец с фамилией'
          type: string
          default: A
        first_name_col:
          title: 'Столбец с именем'
          type: string
          default: B
        patronymic_col:
          title: 'Столбец с отчеством'
          type: string
          default: C
        group_name_col:
          title: 'Столбец с названием группы'
          type: string
          default: D
      type: object
    GetAllDto2:
      properties:
        user_ids:
          title: 'Пользователи для фильтрации'
          type: array
          items: {  }
          default: null
          maxItems: 50
          nullable: true
        teacher_ids:
          title: 'Преподаватели для фильтрации'
          type: array
          items: {  }
          default: null
          maxItems: 50
          nullable: true
        subject_ids:
          title: 'Предметы для фильтрации'
          type: array
          items: {  }
          default: null
          maxItems: 50
          nullable: true
        is_actual_from:
          title: 'Был актуален с'
          type: string
          nullable: true
        is_actual_to:
          title: 'Был актуален до'
          type: string
          nullable: true
        sort_by:
          title: 'Сортировка по'
          type: string
          default: name
          enum:
            - name
            - actual_from
            - actual_to
        sort_type:
          title: 'Тип сортировки'
          type: string
          default: asc
          enum:
            - asc
            - desc
        offset:
          type: integer
          default: 0
          minimum: 0
        limit:
          type: integer
          default: 100
          maximum: 100
          minimum: 0
          nullable: true
      type: object
    GetMyDto:
      properties:
        actual:
          title: 'Актуален ли предмет на текущий момент'
          type: boolean
          default: null
          nullable: true
        subject_ids:
          title: 'Предметы для фильтрации'
          type: array
          items: {  }
          default: null
          maxItems: 50
          nullable: true
        sort_by:
          title: 'Сортировка по'
          type: string
          default: name
          enum:
            - name
            - actual_from
            - actual_to
        sort_type:
          title: 'Тип сортировки'
          type: string
          default: asc
          enum:
            - asc
            - desc
        offset:
          type: integer
          default: 0
          minimum: 0
        limit:
          type: integer
          default: 100
          maximum: 100
          minimum: 0
          nullable: true
      type: object
    SuccessResponse:
      properties:
        data:
          type: object
          default: null
          nullable: true
          anyOf:
            -
              type: boolean
            -
              type: integer
            -
              type: number
            -
              type: string
            -
              type: array
              items: {  }
            -
              type: object
              additionalProperties: true
        meta:
          $ref: '#/components/schemas/Meta'
      type: object
    SigningInUser:
      required:
        - credentials
        - user
      properties:
        credentials:
          $ref: '#/components/schemas/UserCredentials'
        user:
          $ref: '#/components/schemas/User'
      type: object
    ErrorResponse:
      required:
        - error
      properties:
        error:
          $ref: '#/components/schemas/Error'
      type: object
    ValidationResponse:
      properties:
        errors:
          type: object
          default: []
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/Error'
      type: object
    User:
      required:
        - id
        - email
        - status
        - deleted
        - permissions
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        data:
          nullable: true
          oneOf:
            -
              $ref: '#/components/schemas/UserData'
        status:
          $ref: '#/components/schemas/UserStatusEnum'
        deleted:
          type: boolean
        deleted_at:
          type: string
          format: date-time
          nullable: true
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/PermissionEnum'
      type: object
    UserCredentials:
      required:
        - access_token
        - refresh_token
      properties:
        access_token:
          type: string
          maxLength: 40
          minLength: 40
        refresh_token:
          type: string
          maxLength: 40
          minLength: 40
      type: object
    SuccessWithPaginationResponse:
      properties:
        data:
          $ref: '#/components/schemas/PaginatedData'
        meta:
          $ref: '#/components/schemas/Meta'
      type: object
    Group:
      required:
        - id
        - name
      properties:
        id:
          type: string
        name:
          type: string
      type: object
    CreatedGroupsInfo:
      required:
        - created
      properties:
        created:
          type: integer
      type: object
    Subject:
      required:
        - id
        - name
      properties:
        id:
          type: string
        name:
          type: string
      type: object
    CreatedSubjectsInfo:
      required:
        - created
      properties:
        created:
          type: integer
      type: object
    UserData:
      required:
        - id
        - first_name
        - last_name
      properties:
        id:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        patronymic:
          type: string
          nullable: true
        group:
          nullable: true
          oneOf:
            -
              $ref: '#/components/schemas/Group'
      type: object
    CreatedUserDataInfo:
      required:
        - created
      properties:
        created:
          type: integer
      type: object
    UserSubject:
      required:
        - subject
        - teacher
        - user
        - actual_from
        - actual_to
      properties:
        subject:
          $ref: '#/components/schemas/Subject'
        teacher:
          $ref: '#/components/schemas/LiteUser'
        user:
          $ref: '#/components/schemas/LiteUser'
        actual_from:
          type: string
          format: date-time
        actual_to:
          type: string
          format: date-time
      type: object
    MyUserSubject:
      required:
        - subject
        - teacher
        - actual_from
        - actual_to
      properties:
        subject:
          $ref: '#/components/schemas/Subject'
        teacher:
          $ref: '#/components/schemas/LiteUser'
        actual_from:
          type: string
          format: date-time
        actual_to:
          type: string
          format: date-time
      type: object
    Meta:
      required:
        - mode
      properties:
        mode:
          type: string
      type: object
    Error:
      required:
        - slug
        - message
      properties:
        slug:
          type: string
        message:
          type: string
      type: object
    UserStatusEnum:
      type: string
      enum:
        - draft
        - active
    PermissionEnum:
      type: string
      enum:
        - survey.view
        - survey.complete
        - survey.create
        - survey.update
        - survey.delete
        - survey.view_result
        - survey.view_all
        - user.create
        - user.view
        - user.export
        - user_data.import
        - user_data.view_all
        - group.create
        - group.import
        - subject.create
        - subject.import
        - user_subject.view_all
        - user_subject.view_my
    PaginatedData:
      properties:
        items:
          type: array
          items: {  }
          default: []
        offset:
          type: integer
          default: null
          nullable: true
        limit:
          type: integer
          default: null
          nullable: true
        count:
          type: integer
          default: null
          nullable: true
        sort_by:
          type: string
          default: null
          nullable: true
        sort_type:
          type: string
          default: null
          nullable: true
      type: object
    LiteUser:
      required:
        - id
        - email
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        data:
          nullable: true
          oneOf:
            -
              $ref: '#/components/schemas/UserData'
      type: object
  securitySchemes:
    Bearer:
      type: http
      bearerFormat: JWT
      scheme: bearer
security:
  -
    Bearer: []
tags:
  -
    name: health
    description: 'Ручки для проверки работоспособности сервера'
  -
    name: auth
    description: 'Ручки для авторизации и аутентификации'
  -
    name: user-data
    description: 'Ручки для работы с данными пользователей'
  -
    name: groups
    description: 'Ручки для работы с группами'
  -
    name: me
    description: 'Ручки для работы с "собой"'
  -
    name: subjects
    description: 'Ручки для работы с предметами'
  -
    name: user-subjects
    description: 'Ручки для работы с предметами, привязанными к пользователям'
  -
    name: user

